{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dcm2bids","text":"<p>Your friendly DICOM converter.</p> <p> </p> <p> </p> <p> </p> <p></p> <p><code>dcm2bids</code> reorganises NIfTI files using dcm2niix into the Brain Imaging Data Structure (BIDS).</p>"},{"location":"#scope","title":"Scope","text":"<p><code>dcm2bids</code> is a community-centered project. It aims to be a friendly, easy-to-use tool to convert your dicoms. Our main goal is to make the dicom to BIDS conversion as effortless as possible. Even if in the near future more advanced features will be added, we'll keep the focus on your day to day use case without complicating anything. That's the promise of the <code>dcm2bids</code> project.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Please take a look at the documentation to:</p> <ul> <li>Learn about bids with some dataset examples</li> <li>Install dcm2bids</li> <li>Follow the tutorial</li> <li>Seek for more advanced usage</li> </ul>"},{"location":"#issues-and-questions","title":"Issues and Questions","text":"<p>We work hard to make sure <code>dcm2bids</code> is robust and we welcome comments and questions to make sure it meets your use case! Here's our preferred workflow:</p> <ul> <li> <p>If you have a usage question , we encourage you to post your question on Neurostars with dcm2bids as an optional tag. The tag is really important because Neurostars will notify the <code>dcm2bids</code> team only if the tag is present. Neurostars is a question and answer forum for neuroscience researchers, infrastructure providers and software developers, and free to access. Before posting your question, you may want to first browse through questions that were tagged with the dcm2bids tag. If your question persists, feel free to comment on previous questions or ask your own question.</p> </li> <li> <p>If you think you've found a bug , please open an issue on our repository. To do this, you'll need a GitHub account. See our contributing guide for more details.</p> </li> </ul>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"changelog/#217-2022-05-30","title":"2.1.7 - 2022-05-30","text":"<p>Last version before refactoring.</p> <ul> <li>Major and minor documentation fixes</li> <li>Fix \u00ccntended for</li> <li>Fix Entity table order</li> <li>Fix Windows paths</li> <li>Fix issue when no internet</li> <li>Remove support to Python 2.6</li> </ul>"},{"location":"changelog/#216-2021-02-16","title":"2.1.6 - 2021-02-16","text":"<ul> <li>New Containers</li> <li>Fix pypi package</li> </ul>"},{"location":"changelog/#215-2021-01-04","title":"2.1.5 - 2021-01-04","text":"<ul> <li>Add possibility to be not case sensitive</li> <li>Fix issue 34: dcm2bids not ordering runs chronologically</li> </ul>"},{"location":"changelog/#214-2019-04-04","title":"2.1.4 - 2019-04-04","text":"<ul> <li>Add a tutorial to the documentation</li> <li>Update BIDS version in dcm2bids_scaffold</li> <li>Bug fix when intendedFor was equal to 0</li> <li>Restructuring of the documentation and add version description</li> </ul>"},{"location":"changelog/#213-2019-04-02","title":"2.1.3 - 2019-04-02","text":"<ul> <li>dicom_dir can be a list or str</li> </ul>"},{"location":"changelog/#212-2019-04-01","title":"2.1.2 - 2019-04-01","text":"<ul> <li>Add documentation with mkdocs</li> <li>Bug fix in dcm2niix_version</li> </ul>"},{"location":"changelog/#211-2019-03-29","title":"2.1.1 - 2019-03-29","text":"<ul> <li>Bug fix</li> </ul>"},{"location":"changelog/#210-2019-03-28","title":"2.1.0 - 2019-03-28","text":"<ul> <li>Checking if a new version of dcm2bids or dcm2niix is available on github</li> <li>dcm2niix output is now log to file as debug</li> <li>Add dcm2bids version to sidecars</li> <li>intendedFor option can also be a list</li> </ul>"},{"location":"changelog/#200-2019-03-10","title":"2.0.0 - 2019-03-10","text":"<ul> <li>The anonymizer option no longer exists from the script dcm2bids. It is still possible to deface the anatomical nifti images using the \"defaceTpl\" key in the congifuration file.</li> <li>Acquisitions are now sorted using the sidecar data instead of only the sidecar filename. The default behaviour is to sort by <code>SeriesNumber</code> then by <code>AcquisitionTime</code> then by the <code>SidecarFilename</code>. You can change this behaviour setting the key \"compKeys\" inside the configuration file.</li> <li>Add an option to use <code>re</code> for more flexibility for matching criteria. Set the key \"searchMethod\" to \"re\" in the config file. fnmatch is still the default.</li> <li>Design fix in matching with list in the sidecar.</li> <li>Sidecar modification using \"sidecarChanges\" in the configuration file.</li> <li>intendedFor option for fieldmap in the configuration file</li> <li>log improvement</li> <li>major code refactoring</li> <li>add docstrings</li> <li>add tests with pytest</li> </ul>"},{"location":"changelog/#118-2018-02-02","title":"1.1.8 - 2018-02-02","text":"<ul> <li>Add dcm2bids as runscript inside Singularity</li> <li>Remove logger from dcm2bids_helper</li> </ul>"},{"location":"changelog/#117-2018-02-01","title":"1.1.7 - 2018-02-01","text":""},{"location":"changelog/#116-2018-02-01","title":"1.1.6 - 2018-02-01","text":""},{"location":"changelog/#114-2017-11-09","title":"1.1.4 - 2017-11-09","text":""},{"location":"changelog/#113-2017-11-09","title":"1.1.3 - 2017-11-09","text":""},{"location":"changelog/#112-2017-11-03","title":"1.1.2 - 2017-11-03","text":""},{"location":"changelog/#101-2017-11-01","title":"1.0.1 - 2017-11-01","text":""},{"location":"code_of_conduct/","title":"Code of Conduct","text":"<p>Each of us as a member of the dcm2bids community we ensure that every contributors enjoy their time contributing and helping people. Accordingly, everyone who participates in the development in any way possible is expected to show respect, courtesy to other community members including end-users who are seeking help on Neurostars or on GitHub.</p> <p>We also encourage everybody regardless of age, gender identity, level of experience, native langage, race or religion to be involved in the project. We pledge to make participation in the dcm2bids project an harassment-free experience for everyone.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our standards","text":"<p>We commit to promote any behavior that contributes to create a positive environment including:</p> <ul> <li>Using welcoming and inclusive language;</li> <li>Being respectful;</li> <li>Show empathy towards everybody;</li> <li>Focusing on what is best for the community.</li> </ul> <p>We do NOT tolerate harassment or inappropriate behavior in the dcm2bids community.</p>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within our online GitHub repository and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting Arnaud Bor\u00e9 at arnaud.bore@criugm.qc.ca.</p> <p>Confidentiality will be respected in reporting.</p> <p>As the first interim Benevolent Dictator for Life (BDFL), Arnaud Bor\u00e9 can take any action he deems appropriate for the safety of the dcm2bids community, including but not limited to:</p> <ul> <li>facilitating a conversation between the two parties involved in the violation   of the code of conduct;</li> <li>requesting a contributor apologize for their behavior;</li> <li>asking a contributor or multiple contributors to enter a cooling off period   that puts a time-limited pause on a particular discussion topic;</li> <li>asking a contributor to no longer participate in the development of dcm2bids.</li> </ul>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct was adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html as well as Code of Conduct from the tedana and STEMMRoleModels projects.</p>"},{"location":"dcm2bids/","title":"Module dcm2bids","text":"<p>dcm2bids</p> <p>Reorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"\n\ndcm2bids\n\n--------\n\nReorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure\n\n\"\"\"\n\nfrom .dcm2bids import Dcm2bids\n\nfrom .scaffold import scaffold\n\nfrom .version import __version__\n\n__all__ = [\"__version__\", \"Dcm2bids\", \"scaffold\"]\n</code></pre>"},{"location":"dcm2bids/#sub-modules","title":"Sub-modules","text":"<ul> <li>dcm2bids.dcm2bids</li> <li>dcm2bids.dcm2niix</li> <li>dcm2bids.helper</li> <li>dcm2bids.logger</li> <li>dcm2bids.scaffold</li> <li>dcm2bids.sidecar</li> <li>dcm2bids.structure</li> <li>dcm2bids.utils</li> <li>dcm2bids.version</li> </ul>"},{"location":"dcm2bids/#variables","title":"Variables","text":"<pre><code>__version__\n</code></pre>"},{"location":"dcm2bids/#functions","title":"Functions","text":""},{"location":"dcm2bids/#scaffold","title":"scaffold","text":"<pre><code>def scaffold(\n    output_dir_override: Optional[str] = None\n)\n</code></pre> <p>scaffold entry point</p> View Source <pre><code>def scaffold(output_dir_override: Optional[str] = None):\n\n    \"\"\"scaffold entry point\"\"\"\n\n    args = _get_arguments()\n\n    output_dir_ = output_dir_override if output_dir_override is not None else args.output_dir\n\n    for _ in [\"code\", \"derivatives\", \"sourcedata\"]:\n\n        os.makedirs(os.path.join(output_dir_, _), exist_ok=True)\n\n    for _ in [\n\n        \"dataset_description.json\",\n\n        \"participants.json\",\n\n        \"participants.tsv\",\n\n        \"README\",\n\n    ]:\n\n        dest = os.path.join(output_dir_, _)\n\n        with resources.path(__name__, _) as src:\n\n            shutil.copyfile(src, dest)\n\n    with resources.path(__name__, \"CHANGES\") as changes_template:\n\n        with open(changes_template) as _:\n\n            data = _.read().format(datetime.date.today().strftime(\"%Y-%m-%d\"))\n\n        write_txt(\n\n            os.path.join(output_dir_, \"CHANGES\"),\n\n            data.split(\"\\n\")[:-1],\n\n    )\n</code></pre>"},{"location":"dcm2bids/#classes","title":"Classes","text":""},{"location":"dcm2bids/#dcm2bids","title":"Dcm2bids","text":"<pre><code>class Dcm2bids(\n    dicom_dir,\n    participant,\n    config,\n    output_dir=PosixPath('/home/sam/Projects/Dcm2Bids'),\n    session='',\n    clobber=False,\n    forceDcm2niix=False,\n    log_level='WARNING',\n    **_\n)\n</code></pre> <p>Object to handle dcm2bids execution steps</p>"},{"location":"dcm2bids/#attributes","title":"Attributes","text":"Name Type Description Default dicom_dir str or list A list of folder with dicoms to convert None participant str Label of your participant None config path Path to a dcm2bids configuration file None output_dir path Path to the BIDS base folder None session str Optional label of a session None clobber boolean Overwrite file if already in BIDS folder None forceDcm2niix boolean Forces a cleaning of a previous execution ofdcm2niix None log_level str logging level None View Source <pre><code>class Dcm2bids(object):\n\n    \"\"\" Object to handle dcm2bids execution steps\n\n    Args:\n\n        dicom_dir (str or list): A list of folder with dicoms to convert\n\n        participant (str): Label of your participant\n\n        config (path): Path to a dcm2bids configuration file\n\n        output_dir (path): Path to the BIDS base folder\n\n        session (str): Optional label of a session\n\n        clobber (boolean): Overwrite file if already in BIDS folder\n\n        forceDcm2niix (boolean): Forces a cleaning of a previous execution of\n\n                                 dcm2niix\n\n        log_level (str): logging level\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        dicom_dir,\n\n        participant,\n\n        config,\n\n        output_dir=DEFAULT.outputDir,\n\n        session=DEFAULT.session,\n\n        clobber=DEFAULT.clobber,\n\n        forceDcm2niix=DEFAULT.forceDcm2niix,\n\n        log_level=DEFAULT.logLevel,\n\n        **_\n\n    ):\n\n        self._dicomDirs = []\n\n        self.dicomDirs = dicom_dir\n\n        self.bidsDir = valid_path(output_dir, type=\"folder\")\n\n        self.config = load_json(valid_path(config, type=\"file\"))\n\n        self.participant = Participant(participant, session)\n\n        self.clobber = clobber\n\n        self.forceDcm2niix = forceDcm2niix\n\n        self.logLevel = log_level\n\n        # logging setup\n\n        self.set_logger()\n\n        self.logger.info(\"--- dcm2bids start ---\")\n\n        self.logger.info(\"OS:version: %s\", platform.platform())\n\n        self.logger.info(\"python:version: %s\", sys.version.replace(\"\\n\", \"\"))\n\n        self.logger.info(\"dcm2bids:version: %s\", __version__)\n\n        self.logger.info(\"dcm2niix:version: %s\", dcm2niix_version())\n\n        self.logger.info(\"participant: %s\", self.participant.name)\n\n        self.logger.info(\"session: %s\", self.participant.session)\n\n        self.logger.info(\"config: %s\", os.path.realpath(config))\n\n        self.logger.info(\"BIDS directory: %s\", os.path.realpath(output_dir))\n\n    @property\n\n    def dicomDirs(self):\n\n        \"\"\"List of DICOMs directories\"\"\"\n\n        return self._dicomDirs\n\n    @dicomDirs.setter\n\n    def dicomDirs(self, value):\n\n        dicom_dirs = value if isinstance(value, list) else [value]\n\n        valid_dirs = [valid_path(_dir, \"folder\") for _dir in dicom_dirs]\n\n        self._dicomDirs = valid_dirs\n\n    def set_logger(self):\n\n        \"\"\" Set a basic logger\"\"\"\n\n        logDir = self.bidsDir / DEFAULT.tmpDirName / \"log\"\n\n        logFile = logDir / f\"{self.participant.prefix}_{datetime.now().isoformat().replace(':', '')}.log\"\n\n        logDir.mkdir(parents=True, exist_ok=True)\n\n        setup_logging(self.logLevel, logFile)\n\n        self.logger = logging.getLogger(__name__)\n\n    def run(self):\n\n        \"\"\"Run dcm2bids\"\"\"\n\n        dcm2niix = Dcm2niix(\n\n            self.dicomDirs,\n\n            self.bidsDir,\n\n            self.participant,\n\n            self.config.get(\"dcm2niixOptions\", DEFAULT.dcm2niixOptions),\n\n        )\n\n        check_latest()\n\n        check_latest(\"dcm2niix\")\n\n        dcm2niix.run(self.forceDcm2niix)\n\n        sidecars = []\n\n        for filename in dcm2niix.sidecarFiles:\n\n            sidecars.append(\n\n                Sidecar(filename, self.config.get(\"compKeys\", DEFAULT.compKeys))\n\n            )\n\n        sidecars = sorted(sidecars)\n\n        parser = SidecarPairing(\n\n            sidecars,\n\n            self.config[\"descriptions\"],\n\n            self.config.get(\"searchMethod\", DEFAULT.searchMethod),\n\n            self.config.get(\"caseSensitive\", DEFAULT.caseSensitive)\n\n        )\n\n        parser.build_graph()\n\n        parser.build_acquisitions(self.participant)\n\n        parser.find_runs()\n\n        self.logger.info(\"moving acquisitions into BIDS folder\")\n\n        intendedForList = [[] for i in range(len(parser.descriptions))]\n\n        for acq in parser.acquisitions:\n\n            acq.setDstFile()\n\n            intendedForList = self.move(acq, intendedForList)\n\n    def move(self, acquisition, intendedForList):\n\n        \"\"\"Move an acquisition to BIDS format\"\"\"\n\n        for srcFile in glob(acquisition.srcRoot + \".*\"):\n\n            ext = Path(srcFile).suffixes\n\n            ext = [curr_ext for curr_ext in ext if curr_ext in ['.nii','.gz',\n\n                                                                '.json',\n\n                                                                '.bval','.bvec']]\n\n            dstFile = (self.bidsDir / acquisition.dstRoot).with_suffix(\"\".join(ext))\n\n            dstFile.parent.mkdir(parents = True, exist_ok = True)\n\n            # checking if destination file exists\n\n            if dstFile.exists():\n\n                self.logger.info(\"'%s' already exists\", dstFile)\n\n                if self.clobber:\n\n                    self.logger.info(\"Overwriting because of --clobber option\")\n\n                else:\n\n                    self.logger.info(\"Use --clobber option to overwrite\")\n\n                    continue\n\n            # it's an anat nifti file and the user using a deface script\n\n            if (\n\n                self.config.get(\"defaceTpl\")\n\n                and acquisition.dataType == \"func\"\n\n                and \".nii\" in ext\n\n                ):\n\n                try:\n\n                    os.remove(dstFile)\n\n                except FileNotFoundError:\n\n                    pass\n\n                defaceTpl = self.config.get(\"defaceTpl\")\n\n                cmd = [w.replace('srcFile', srcFile) for w in defaceTpl]\n\n                cmd = [w.replace('dstFile', dstFile) for w in defaceTpl]\n\n                run_shell_command(cmd)\n\n                intendedForList[acquisition.indexSidecar].append(acquisition.dstIntendedFor + \"\".join(ext))\n\n            elif \".json\" in ext:\n\n                data = acquisition.dstSidecarData(self.config[\"descriptions\"],\n\n                                                  intendedForList)\n\n                save_json(dstFile, data)\n\n                os.remove(srcFile)\n\n            # just move\n\n            else:\n\n                os.rename(srcFile, dstFile)\n\n            intendedFile = acquisition.dstIntendedFor + \".nii.gz\"\n\n            if intendedFile not in intendedForList[acquisition.indexSidecar]:\n\n                intendedForList[acquisition.indexSidecar].append(intendedFile)\n\n        return intendedForList\n</code></pre>"},{"location":"dcm2bids/#instance-variables","title":"Instance variables","text":"<pre><code>dicomDirs\n</code></pre> <p>List of DICOMs directories</p>"},{"location":"dcm2bids/#methods","title":"Methods","text":""},{"location":"dcm2bids/#move","title":"move","text":"<pre><code>def move(\n    self,\n    acquisition,\n    intendedForList\n)\n</code></pre> <p>Move an acquisition to BIDS format</p> View Source <pre><code>    def move(self, acquisition, intendedForList):\n\n        \"\"\"Move an acquisition to BIDS format\"\"\"\n\n        for srcFile in glob(acquisition.srcRoot + \".*\"):\n\n            ext = Path(srcFile).suffixes\n\n            ext = [curr_ext for curr_ext in ext if curr_ext in ['.nii','.gz',\n\n                                                                '.json',\n\n                                                                '.bval','.bvec']]\n\n            dstFile = (self.bidsDir / acquisition.dstRoot).with_suffix(\"\".join(ext))\n\n            dstFile.parent.mkdir(parents = True, exist_ok = True)\n\n            # checking if destination file exists\n\n            if dstFile.exists():\n\n                self.logger.info(\"'%s' already exists\", dstFile)\n\n                if self.clobber:\n\n                    self.logger.info(\"Overwriting because of --clobber option\")\n\n                else:\n\n                    self.logger.info(\"Use --clobber option to overwrite\")\n\n                    continue\n\n            # it's an anat nifti file and the user using a deface script\n\n            if (\n\n                self.config.get(\"defaceTpl\")\n\n                and acquisition.dataType == \"func\"\n\n                and \".nii\" in ext\n\n                ):\n\n                try:\n\n                    os.remove(dstFile)\n\n                except FileNotFoundError:\n\n                    pass\n\n                defaceTpl = self.config.get(\"defaceTpl\")\n\n                cmd = [w.replace('srcFile', srcFile) for w in defaceTpl]\n\n                cmd = [w.replace('dstFile', dstFile) for w in defaceTpl]\n\n                run_shell_command(cmd)\n\n                intendedForList[acquisition.indexSidecar].append(acquisition.dstIntendedFor + \"\".join(ext))\n\n            elif \".json\" in ext:\n\n                data = acquisition.dstSidecarData(self.config[\"descriptions\"],\n\n                                                  intendedForList)\n\n                save_json(dstFile, data)\n\n                os.remove(srcFile)\n\n            # just move\n\n            else:\n\n                os.rename(srcFile, dstFile)\n\n            intendedFile = acquisition.dstIntendedFor + \".nii.gz\"\n\n            if intendedFile not in intendedForList[acquisition.indexSidecar]:\n\n                intendedForList[acquisition.indexSidecar].append(intendedFile)\n\n        return intendedForList\n</code></pre>"},{"location":"dcm2bids/#run","title":"run","text":"<pre><code>def run(\n    self\n)\n</code></pre> <p>Run dcm2bids</p> View Source <pre><code>    def run(self):\n\n        \"\"\"Run dcm2bids\"\"\"\n\n        dcm2niix = Dcm2niix(\n\n            self.dicomDirs,\n\n            self.bidsDir,\n\n            self.participant,\n\n            self.config.get(\"dcm2niixOptions\", DEFAULT.dcm2niixOptions),\n\n        )\n\n        check_latest()\n\n        check_latest(\"dcm2niix\")\n\n        dcm2niix.run(self.forceDcm2niix)\n\n        sidecars = []\n\n        for filename in dcm2niix.sidecarFiles:\n\n            sidecars.append(\n\n                Sidecar(filename, self.config.get(\"compKeys\", DEFAULT.compKeys))\n\n            )\n\n        sidecars = sorted(sidecars)\n\n        parser = SidecarPairing(\n\n            sidecars,\n\n            self.config[\"descriptions\"],\n\n            self.config.get(\"searchMethod\", DEFAULT.searchMethod),\n\n            self.config.get(\"caseSensitive\", DEFAULT.caseSensitive)\n\n        )\n\n        parser.build_graph()\n\n        parser.build_acquisitions(self.participant)\n\n        parser.find_runs()\n\n        self.logger.info(\"moving acquisitions into BIDS folder\")\n\n        intendedForList = [[] for i in range(len(parser.descriptions))]\n\n        for acq in parser.acquisitions:\n\n            acq.setDstFile()\n\n            intendedForList = self.move(acq, intendedForList)\n</code></pre>"},{"location":"dcm2bids/#set_logger","title":"set_logger","text":"<pre><code>def set_logger(\n    self\n)\n</code></pre> <p>Set a basic logger</p> View Source <pre><code>    def set_logger(self):\n\n        \"\"\" Set a basic logger\"\"\"\n\n        logDir = self.bidsDir / DEFAULT.tmpDirName / \"log\"\n\n        logFile = logDir / f\"{self.participant.prefix}_{datetime.now().isoformat().replace(':', '')}.log\"\n\n        logDir.mkdir(parents=True, exist_ok=True)\n\n        setup_logging(self.logLevel, logFile)\n\n        self.logger = logging.getLogger(__name__)\n</code></pre>"},{"location":"dcm2bids/dcm2bids/","title":"Module dcm2bids.dcm2bids","text":"<p>Reorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"\n\nReorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure\n\n\"\"\"\n\nimport argparse\n\nimport logging\n\nimport os\n\nfrom pathlib import Path\n\nimport platform\n\nimport sys\n\nfrom datetime import datetime\n\nfrom glob import glob\n\nfrom dcm2bids.dcm2niix import Dcm2niix\n\nfrom dcm2bids.logger import setup_logging\n\nfrom dcm2bids.sidecar import Sidecar, SidecarPairing\n\nfrom dcm2bids.structure import Participant\n\nfrom dcm2bids.utils import (DEFAULT, load_json, save_json,\n\n                            splitext_, run_shell_command, valid_path)\n\nfrom dcm2bids.version import __version__, check_latest, dcm2niix_version\n\nclass Dcm2bids(object):\n\n    \"\"\" Object to handle dcm2bids execution steps\n\n    Args:\n\n        dicom_dir (str or list): A list of folder with dicoms to convert\n\n        participant (str): Label of your participant\n\n        config (path): Path to a dcm2bids configuration file\n\n        output_dir (path): Path to the BIDS base folder\n\n        session (str): Optional label of a session\n\n        clobber (boolean): Overwrite file if already in BIDS folder\n\n        forceDcm2niix (boolean): Forces a cleaning of a previous execution of\n\n                                 dcm2niix\n\n        log_level (str): logging level\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        dicom_dir,\n\n        participant,\n\n        config,\n\n        output_dir=DEFAULT.outputDir,\n\n        session=DEFAULT.session,\n\n        clobber=DEFAULT.clobber,\n\n        forceDcm2niix=DEFAULT.forceDcm2niix,\n\n        log_level=DEFAULT.logLevel,\n\n        **_\n\n    ):\n\n        self._dicomDirs = []\n\n        self.dicomDirs = dicom_dir\n\n        self.bidsDir = valid_path(output_dir, type=\"folder\")\n\n        self.config = load_json(valid_path(config, type=\"file\"))\n\n        self.participant = Participant(participant, session)\n\n        self.clobber = clobber\n\n        self.forceDcm2niix = forceDcm2niix\n\n        self.logLevel = log_level\n\n        # logging setup\n\n        self.set_logger()\n\n        self.logger.info(\"--- dcm2bids start ---\")\n\n        self.logger.info(\"OS:version: %s\", platform.platform())\n\n        self.logger.info(\"python:version: %s\", sys.version.replace(\"\\n\", \"\"))\n\n        self.logger.info(\"dcm2bids:version: %s\", __version__)\n\n        self.logger.info(\"dcm2niix:version: %s\", dcm2niix_version())\n\n        self.logger.info(\"participant: %s\", self.participant.name)\n\n        self.logger.info(\"session: %s\", self.participant.session)\n\n        self.logger.info(\"config: %s\", os.path.realpath(config))\n\n        self.logger.info(\"BIDS directory: %s\", os.path.realpath(output_dir))\n\n    @property\n\n    def dicomDirs(self):\n\n        \"\"\"List of DICOMs directories\"\"\"\n\n        return self._dicomDirs\n\n    @dicomDirs.setter\n\n    def dicomDirs(self, value):\n\n        dicom_dirs = value if isinstance(value, list) else [value]\n\n        valid_dirs = [valid_path(_dir, \"folder\") for _dir in dicom_dirs]\n\n        self._dicomDirs = valid_dirs\n\n    def set_logger(self):\n\n        \"\"\" Set a basic logger\"\"\"\n\n        logDir = self.bidsDir / DEFAULT.tmpDirName / \"log\"\n\n        logFile = logDir / f\"{self.participant.prefix}_{datetime.now().isoformat().replace(':', '')}.log\"\n\n        logDir.mkdir(parents=True, exist_ok=True)\n\n        setup_logging(self.logLevel, logFile)\n\n        self.logger = logging.getLogger(__name__)\n\n    def run(self):\n\n        \"\"\"Run dcm2bids\"\"\"\n\n        dcm2niix = Dcm2niix(\n\n            self.dicomDirs,\n\n            self.bidsDir,\n\n            self.participant,\n\n            self.config.get(\"dcm2niixOptions\", DEFAULT.dcm2niixOptions),\n\n        )\n\n        check_latest()\n\n        check_latest(\"dcm2niix\")\n\n        dcm2niix.run(self.forceDcm2niix)\n\n        sidecars = []\n\n        for filename in dcm2niix.sidecarFiles:\n\n            sidecars.append(\n\n                Sidecar(filename, self.config.get(\"compKeys\", DEFAULT.compKeys))\n\n            )\n\n        sidecars = sorted(sidecars)\n\n        parser = SidecarPairing(\n\n            sidecars,\n\n            self.config[\"descriptions\"],\n\n            self.config.get(\"searchMethod\", DEFAULT.searchMethod),\n\n            self.config.get(\"caseSensitive\", DEFAULT.caseSensitive)\n\n        )\n\n        parser.build_graph()\n\n        parser.build_acquisitions(self.participant)\n\n        parser.find_runs()\n\n        self.logger.info(\"moving acquisitions into BIDS folder\")\n\n        intendedForList = [[] for i in range(len(parser.descriptions))]\n\n        for acq in parser.acquisitions:\n\n            acq.setDstFile()\n\n            intendedForList = self.move(acq, intendedForList)\n\n    def move(self, acquisition, intendedForList):\n\n        \"\"\"Move an acquisition to BIDS format\"\"\"\n\n        for srcFile in glob(acquisition.srcRoot + \".*\"):\n\n            ext = Path(srcFile).suffixes\n\n            ext = [curr_ext for curr_ext in ext if curr_ext in ['.nii','.gz',\n\n                                                                '.json',\n\n                                                                '.bval','.bvec']]\n\n            dstFile = (self.bidsDir / acquisition.dstRoot).with_suffix(\"\".join(ext))\n\n            dstFile.parent.mkdir(parents = True, exist_ok = True)\n\n            # checking if destination file exists\n\n            if dstFile.exists():\n\n                self.logger.info(\"'%s' already exists\", dstFile)\n\n                if self.clobber:\n\n                    self.logger.info(\"Overwriting because of --clobber option\")\n\n                else:\n\n                    self.logger.info(\"Use --clobber option to overwrite\")\n\n                    continue\n\n            # it's an anat nifti file and the user using a deface script\n\n            if (\n\n                self.config.get(\"defaceTpl\")\n\n                and acquisition.dataType == \"func\"\n\n                and \".nii\" in ext\n\n                ):\n\n                try:\n\n                    os.remove(dstFile)\n\n                except FileNotFoundError:\n\n                    pass\n\n                defaceTpl = self.config.get(\"defaceTpl\")\n\n                cmd = [w.replace('srcFile', srcFile) for w in defaceTpl]\n\n                cmd = [w.replace('dstFile', dstFile) for w in defaceTpl]\n\n                run_shell_command(cmd)\n\n                intendedForList[acquisition.indexSidecar].append(acquisition.dstIntendedFor + \"\".join(ext))\n\n            elif \".json\" in ext:\n\n                data = acquisition.dstSidecarData(self.config[\"descriptions\"],\n\n                                                  intendedForList)\n\n                save_json(dstFile, data)\n\n                os.remove(srcFile)\n\n            # just move\n\n            else:\n\n                os.rename(srcFile, dstFile)\n\n            intendedFile = acquisition.dstIntendedFor + \".nii.gz\"\n\n            if intendedFile not in intendedForList[acquisition.indexSidecar]:\n\n                intendedForList[acquisition.indexSidecar].append(intendedFile)\n\n        return intendedForList\n\ndef _build_arg_parser():\n\n    p = argparse.ArgumentParser(description=__doc__, epilog=DEFAULT.EPILOG,\n\n                                formatter_class=argparse.RawTextHelpFormatter)\n\n    p.add_argument(\"-d\", \"--dicom_dir\",\n\n                   type=Path, required=True, nargs=\"+\",\n\n                   help=\"DICOM directory(ies).\")\n\n    p.add_argument(\"-p\", \"--participant\",\n\n                   required=True,\n\n                   help=\"Participant ID.\")\n\n    p.add_argument(\"-s\", \"--session\",\n\n                   required=False,\n\n                   default=\"\",\n\n                   help=\"Session ID.\")\n\n    p.add_argument(\"-c\", \"--config\",\n\n                   type=Path,\n\n                   required=True,\n\n                   help=\"JSON configuration file (see example/config.json).\")\n\n    p.add_argument(\"-o\", \"--output_dir\",\n\n                   required=False,\n\n                   type=Path,\n\n                   default=Path.cwd(),\n\n                   help=\"Output BIDS directory. (Default: %(default)s)\")\n\n    p.add_argument(\"--forceDcm2niix\",\n\n                   action=\"store_true\",\n\n                   help=\"Overwrite previous temporary dcm2niix \"\n\n                        \"output if it exists.\")\n\n    p.add_argument(\"--clobber\",\n\n                   action=\"store_true\",\n\n                   help=\"Overwrite output if it exists.\")\n\n    p.add_argument(\"-l\", \"--log_level\",\n\n                   required=False,\n\n                   default=DEFAULT.cliLogLevel,\n\n                   choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n\n                   help=\"Set logging level. [%(default)s]\")\n\n    return p\n\ndef main():\n\n    \"\"\"Let's go\"\"\"\n\n    parser = _build_arg_parser()\n\n    args = parser.parse_args()\n\n    app = Dcm2bids(**vars(args))\n\n    return app.run()\n\nif __name__ == \"__main__\":\n\n    sys.exit(main())\n</code></pre>"},{"location":"dcm2bids/dcm2bids/#functions","title":"Functions","text":""},{"location":"dcm2bids/dcm2bids/#main","title":"main","text":"<pre><code>def main(\n\n)\n</code></pre> <p>Let's go</p> View Source <pre><code>def main():\n\n    \"\"\"Let's go\"\"\"\n\n    parser = _build_arg_parser()\n\n    args = parser.parse_args()\n\n    app = Dcm2bids(**vars(args))\n\n    return app.run()\n</code></pre>"},{"location":"dcm2bids/dcm2bids/#classes","title":"Classes","text":""},{"location":"dcm2bids/dcm2bids/#dcm2bids","title":"Dcm2bids","text":"<pre><code>class Dcm2bids(\n    dicom_dir,\n    participant,\n    config,\n    output_dir=PosixPath('/home/sam/Projects/Dcm2Bids'),\n    session='',\n    clobber=False,\n    forceDcm2niix=False,\n    log_level='WARNING',\n    **_\n)\n</code></pre> <p>Object to handle dcm2bids execution steps</p>"},{"location":"dcm2bids/dcm2bids/#attributes","title":"Attributes","text":"Name Type Description Default dicom_dir str or list A list of folder with dicoms to convert None participant str Label of your participant None config path Path to a dcm2bids configuration file None output_dir path Path to the BIDS base folder None session str Optional label of a session None clobber boolean Overwrite file if already in BIDS folder None forceDcm2niix boolean Forces a cleaning of a previous execution ofdcm2niix None log_level str logging level None View Source <pre><code>class Dcm2bids(object):\n\n    \"\"\" Object to handle dcm2bids execution steps\n\n    Args:\n\n        dicom_dir (str or list): A list of folder with dicoms to convert\n\n        participant (str): Label of your participant\n\n        config (path): Path to a dcm2bids configuration file\n\n        output_dir (path): Path to the BIDS base folder\n\n        session (str): Optional label of a session\n\n        clobber (boolean): Overwrite file if already in BIDS folder\n\n        forceDcm2niix (boolean): Forces a cleaning of a previous execution of\n\n                                 dcm2niix\n\n        log_level (str): logging level\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        dicom_dir,\n\n        participant,\n\n        config,\n\n        output_dir=DEFAULT.outputDir,\n\n        session=DEFAULT.session,\n\n        clobber=DEFAULT.clobber,\n\n        forceDcm2niix=DEFAULT.forceDcm2niix,\n\n        log_level=DEFAULT.logLevel,\n\n        **_\n\n    ):\n\n        self._dicomDirs = []\n\n        self.dicomDirs = dicom_dir\n\n        self.bidsDir = valid_path(output_dir, type=\"folder\")\n\n        self.config = load_json(valid_path(config, type=\"file\"))\n\n        self.participant = Participant(participant, session)\n\n        self.clobber = clobber\n\n        self.forceDcm2niix = forceDcm2niix\n\n        self.logLevel = log_level\n\n        # logging setup\n\n        self.set_logger()\n\n        self.logger.info(\"--- dcm2bids start ---\")\n\n        self.logger.info(\"OS:version: %s\", platform.platform())\n\n        self.logger.info(\"python:version: %s\", sys.version.replace(\"\\n\", \"\"))\n\n        self.logger.info(\"dcm2bids:version: %s\", __version__)\n\n        self.logger.info(\"dcm2niix:version: %s\", dcm2niix_version())\n\n        self.logger.info(\"participant: %s\", self.participant.name)\n\n        self.logger.info(\"session: %s\", self.participant.session)\n\n        self.logger.info(\"config: %s\", os.path.realpath(config))\n\n        self.logger.info(\"BIDS directory: %s\", os.path.realpath(output_dir))\n\n    @property\n\n    def dicomDirs(self):\n\n        \"\"\"List of DICOMs directories\"\"\"\n\n        return self._dicomDirs\n\n    @dicomDirs.setter\n\n    def dicomDirs(self, value):\n\n        dicom_dirs = value if isinstance(value, list) else [value]\n\n        valid_dirs = [valid_path(_dir, \"folder\") for _dir in dicom_dirs]\n\n        self._dicomDirs = valid_dirs\n\n    def set_logger(self):\n\n        \"\"\" Set a basic logger\"\"\"\n\n        logDir = self.bidsDir / DEFAULT.tmpDirName / \"log\"\n\n        logFile = logDir / f\"{self.participant.prefix}_{datetime.now().isoformat().replace(':', '')}.log\"\n\n        logDir.mkdir(parents=True, exist_ok=True)\n\n        setup_logging(self.logLevel, logFile)\n\n        self.logger = logging.getLogger(__name__)\n\n    def run(self):\n\n        \"\"\"Run dcm2bids\"\"\"\n\n        dcm2niix = Dcm2niix(\n\n            self.dicomDirs,\n\n            self.bidsDir,\n\n            self.participant,\n\n            self.config.get(\"dcm2niixOptions\", DEFAULT.dcm2niixOptions),\n\n        )\n\n        check_latest()\n\n        check_latest(\"dcm2niix\")\n\n        dcm2niix.run(self.forceDcm2niix)\n\n        sidecars = []\n\n        for filename in dcm2niix.sidecarFiles:\n\n            sidecars.append(\n\n                Sidecar(filename, self.config.get(\"compKeys\", DEFAULT.compKeys))\n\n            )\n\n        sidecars = sorted(sidecars)\n\n        parser = SidecarPairing(\n\n            sidecars,\n\n            self.config[\"descriptions\"],\n\n            self.config.get(\"searchMethod\", DEFAULT.searchMethod),\n\n            self.config.get(\"caseSensitive\", DEFAULT.caseSensitive)\n\n        )\n\n        parser.build_graph()\n\n        parser.build_acquisitions(self.participant)\n\n        parser.find_runs()\n\n        self.logger.info(\"moving acquisitions into BIDS folder\")\n\n        intendedForList = [[] for i in range(len(parser.descriptions))]\n\n        for acq in parser.acquisitions:\n\n            acq.setDstFile()\n\n            intendedForList = self.move(acq, intendedForList)\n\n    def move(self, acquisition, intendedForList):\n\n        \"\"\"Move an acquisition to BIDS format\"\"\"\n\n        for srcFile in glob(acquisition.srcRoot + \".*\"):\n\n            ext = Path(srcFile).suffixes\n\n            ext = [curr_ext for curr_ext in ext if curr_ext in ['.nii','.gz',\n\n                                                                '.json',\n\n                                                                '.bval','.bvec']]\n\n            dstFile = (self.bidsDir / acquisition.dstRoot).with_suffix(\"\".join(ext))\n\n            dstFile.parent.mkdir(parents = True, exist_ok = True)\n\n            # checking if destination file exists\n\n            if dstFile.exists():\n\n                self.logger.info(\"'%s' already exists\", dstFile)\n\n                if self.clobber:\n\n                    self.logger.info(\"Overwriting because of --clobber option\")\n\n                else:\n\n                    self.logger.info(\"Use --clobber option to overwrite\")\n\n                    continue\n\n            # it's an anat nifti file and the user using a deface script\n\n            if (\n\n                self.config.get(\"defaceTpl\")\n\n                and acquisition.dataType == \"func\"\n\n                and \".nii\" in ext\n\n                ):\n\n                try:\n\n                    os.remove(dstFile)\n\n                except FileNotFoundError:\n\n                    pass\n\n                defaceTpl = self.config.get(\"defaceTpl\")\n\n                cmd = [w.replace('srcFile', srcFile) for w in defaceTpl]\n\n                cmd = [w.replace('dstFile', dstFile) for w in defaceTpl]\n\n                run_shell_command(cmd)\n\n                intendedForList[acquisition.indexSidecar].append(acquisition.dstIntendedFor + \"\".join(ext))\n\n            elif \".json\" in ext:\n\n                data = acquisition.dstSidecarData(self.config[\"descriptions\"],\n\n                                                  intendedForList)\n\n                save_json(dstFile, data)\n\n                os.remove(srcFile)\n\n            # just move\n\n            else:\n\n                os.rename(srcFile, dstFile)\n\n            intendedFile = acquisition.dstIntendedFor + \".nii.gz\"\n\n            if intendedFile not in intendedForList[acquisition.indexSidecar]:\n\n                intendedForList[acquisition.indexSidecar].append(intendedFile)\n\n        return intendedForList\n</code></pre>"},{"location":"dcm2bids/dcm2bids/#instance-variables","title":"Instance variables","text":"<pre><code>dicomDirs\n</code></pre> <p>List of DICOMs directories</p>"},{"location":"dcm2bids/dcm2bids/#methods","title":"Methods","text":""},{"location":"dcm2bids/dcm2bids/#move","title":"move","text":"<pre><code>def move(\n    self,\n    acquisition,\n    intendedForList\n)\n</code></pre> <p>Move an acquisition to BIDS format</p> View Source <pre><code>    def move(self, acquisition, intendedForList):\n\n        \"\"\"Move an acquisition to BIDS format\"\"\"\n\n        for srcFile in glob(acquisition.srcRoot + \".*\"):\n\n            ext = Path(srcFile).suffixes\n\n            ext = [curr_ext for curr_ext in ext if curr_ext in ['.nii','.gz',\n\n                                                                '.json',\n\n                                                                '.bval','.bvec']]\n\n            dstFile = (self.bidsDir / acquisition.dstRoot).with_suffix(\"\".join(ext))\n\n            dstFile.parent.mkdir(parents = True, exist_ok = True)\n\n            # checking if destination file exists\n\n            if dstFile.exists():\n\n                self.logger.info(\"'%s' already exists\", dstFile)\n\n                if self.clobber:\n\n                    self.logger.info(\"Overwriting because of --clobber option\")\n\n                else:\n\n                    self.logger.info(\"Use --clobber option to overwrite\")\n\n                    continue\n\n            # it's an anat nifti file and the user using a deface script\n\n            if (\n\n                self.config.get(\"defaceTpl\")\n\n                and acquisition.dataType == \"func\"\n\n                and \".nii\" in ext\n\n                ):\n\n                try:\n\n                    os.remove(dstFile)\n\n                except FileNotFoundError:\n\n                    pass\n\n                defaceTpl = self.config.get(\"defaceTpl\")\n\n                cmd = [w.replace('srcFile', srcFile) for w in defaceTpl]\n\n                cmd = [w.replace('dstFile', dstFile) for w in defaceTpl]\n\n                run_shell_command(cmd)\n\n                intendedForList[acquisition.indexSidecar].append(acquisition.dstIntendedFor + \"\".join(ext))\n\n            elif \".json\" in ext:\n\n                data = acquisition.dstSidecarData(self.config[\"descriptions\"],\n\n                                                  intendedForList)\n\n                save_json(dstFile, data)\n\n                os.remove(srcFile)\n\n            # just move\n\n            else:\n\n                os.rename(srcFile, dstFile)\n\n            intendedFile = acquisition.dstIntendedFor + \".nii.gz\"\n\n            if intendedFile not in intendedForList[acquisition.indexSidecar]:\n\n                intendedForList[acquisition.indexSidecar].append(intendedFile)\n\n        return intendedForList\n</code></pre>"},{"location":"dcm2bids/dcm2bids/#run","title":"run","text":"<pre><code>def run(\n    self\n)\n</code></pre> <p>Run dcm2bids</p> View Source <pre><code>    def run(self):\n\n        \"\"\"Run dcm2bids\"\"\"\n\n        dcm2niix = Dcm2niix(\n\n            self.dicomDirs,\n\n            self.bidsDir,\n\n            self.participant,\n\n            self.config.get(\"dcm2niixOptions\", DEFAULT.dcm2niixOptions),\n\n        )\n\n        check_latest()\n\n        check_latest(\"dcm2niix\")\n\n        dcm2niix.run(self.forceDcm2niix)\n\n        sidecars = []\n\n        for filename in dcm2niix.sidecarFiles:\n\n            sidecars.append(\n\n                Sidecar(filename, self.config.get(\"compKeys\", DEFAULT.compKeys))\n\n            )\n\n        sidecars = sorted(sidecars)\n\n        parser = SidecarPairing(\n\n            sidecars,\n\n            self.config[\"descriptions\"],\n\n            self.config.get(\"searchMethod\", DEFAULT.searchMethod),\n\n            self.config.get(\"caseSensitive\", DEFAULT.caseSensitive)\n\n        )\n\n        parser.build_graph()\n\n        parser.build_acquisitions(self.participant)\n\n        parser.find_runs()\n\n        self.logger.info(\"moving acquisitions into BIDS folder\")\n\n        intendedForList = [[] for i in range(len(parser.descriptions))]\n\n        for acq in parser.acquisitions:\n\n            acq.setDstFile()\n\n            intendedForList = self.move(acq, intendedForList)\n</code></pre>"},{"location":"dcm2bids/dcm2bids/#set_logger","title":"set_logger","text":"<pre><code>def set_logger(\n    self\n)\n</code></pre> <p>Set a basic logger</p> View Source <pre><code>    def set_logger(self):\n\n        \"\"\" Set a basic logger\"\"\"\n\n        logDir = self.bidsDir / DEFAULT.tmpDirName / \"log\"\n\n        logFile = logDir / f\"{self.participant.prefix}_{datetime.now().isoformat().replace(':', '')}.log\"\n\n        logDir.mkdir(parents=True, exist_ok=True)\n\n        setup_logging(self.logLevel, logFile)\n\n        self.logger = logging.getLogger(__name__)\n</code></pre>"},{"location":"dcm2bids/dcm2niix/","title":"Module dcm2bids.dcm2niix","text":"<p>Dcm2niix class</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"Dcm2niix class\"\"\"\n\nimport logging\n\nimport os\n\nfrom pathlib import Path\n\nimport shlex\n\nimport shutil\n\nfrom glob import glob\n\nfrom .utils import DEFAULT, run_shell_command\n\nclass Dcm2niix(object):\n\n    \"\"\" Object to handle dcm2niix execution\n\n    Args:\n\n        dicomDirs (list): A list of folder with dicoms to convert\n\n        bidsDir (str): A path to the root BIDS directory\n\n        participant: Optional Participant object\n\n        options (str): Optional arguments for dcm2niix\n\n    Properties:\n\n        sidecars (list): A list of sidecar path created by dcm2niix\n\n    \"\"\"\n\n    def __init__(\n\n        self, dicomDirs, bidsDir, participant=None, options=DEFAULT.dcm2niixOptions\n\n    ):\n\n        self.logger = logging.getLogger(__name__)\n\n        self.sidecarsFiles = []\n\n        self.dicomDirs = dicomDirs\n\n        self.bidsDir = bidsDir\n\n        self.participant = participant\n\n        self.options = options\n\n    @property\n\n    def outputDir(self):\n\n        \"\"\"\n\n        Returns:\n\n            A directory to save all the output files of dcm2niix\n\n        \"\"\"\n\n        tmpDir = self.participant.prefix if self.participant else DEFAULT.helperDir\n\n        return self.bidsDir / DEFAULT.tmpDirName / tmpDir\n\n    def run(self, force=False):\n\n        \"\"\" Run dcm2niix if necessary\n\n        Args:\n\n            force (boolean): Forces a cleaning of a previous execution of\n\n                             dcm2niix\n\n        Sets:\n\n            sidecarsFiles (list): A list of sidecar path created by dcm2niix\n\n        \"\"\"\n\n        try:\n\n            oldOutput = os.listdir(self.outputDir) != []\n\n        except:\n\n            oldOutput = False\n\n        if oldOutput and force:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"'force' argument is set to True\")\n\n            self.logger.warning(\"Cleaning the previous directory and running dcm2niix\")\n\n            shutil.rmtree(self.outputDir, ignore_errors=True)\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        elif oldOutput:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"Use --forceDcm2niix to rerun dcm2niix\")\n\n        else:\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        self.sidecarFiles = glob(os.path.join(self.outputDir, \"*.json\"))\n\n    def execute(self):\n\n        \"\"\" Execute dcm2niix for each directory in dicomDirs\n\n        \"\"\"\n\n        for dicomDir in self.dicomDirs:\n\n            cmd = ['dcm2niix', *shlex.split(self.options),\n\n                   '-o', self.outputDir, dicomDir]\n\n            output = run_shell_command(cmd)\n\n            try:\n\n                output = output.decode()\n\n            except:\n\n                pass\n\n            self.logger.debug(\"\\n%s\", output)\n\n            self.logger.info(\"Check log file for dcm2niix output\")\n</code></pre>"},{"location":"dcm2bids/dcm2niix/#classes","title":"Classes","text":""},{"location":"dcm2bids/dcm2niix/#dcm2niix","title":"Dcm2niix","text":"<pre><code>class Dcm2niix(\n    dicomDirs,\n    bidsDir,\n    participant=None,\n    options=\"-b y -ba y -z y -f '%3s_%f_%p_%t'\"\n)\n</code></pre> <p>Object to handle dcm2niix execution</p>"},{"location":"dcm2bids/dcm2niix/#attributes","title":"Attributes","text":"Name Type Description Default dicomDirs list A list of folder with dicoms to convert None bidsDir str A path to the root BIDS directory None participant None Optional Participant object None options str Optional arguments for dcm2niix None View Source <pre><code>class Dcm2niix(object):\n\n    \"\"\" Object to handle dcm2niix execution\n\n    Args:\n\n        dicomDirs (list): A list of folder with dicoms to convert\n\n        bidsDir (str): A path to the root BIDS directory\n\n        participant: Optional Participant object\n\n        options (str): Optional arguments for dcm2niix\n\n    Properties:\n\n        sidecars (list): A list of sidecar path created by dcm2niix\n\n    \"\"\"\n\n    def __init__(\n\n        self, dicomDirs, bidsDir, participant=None, options=DEFAULT.dcm2niixOptions\n\n    ):\n\n        self.logger = logging.getLogger(__name__)\n\n        self.sidecarsFiles = []\n\n        self.dicomDirs = dicomDirs\n\n        self.bidsDir = bidsDir\n\n        self.participant = participant\n\n        self.options = options\n\n    @property\n\n    def outputDir(self):\n\n        \"\"\"\n\n        Returns:\n\n            A directory to save all the output files of dcm2niix\n\n        \"\"\"\n\n        tmpDir = self.participant.prefix if self.participant else DEFAULT.helperDir\n\n        return self.bidsDir / DEFAULT.tmpDirName / tmpDir\n\n    def run(self, force=False):\n\n        \"\"\" Run dcm2niix if necessary\n\n        Args:\n\n            force (boolean): Forces a cleaning of a previous execution of\n\n                             dcm2niix\n\n        Sets:\n\n            sidecarsFiles (list): A list of sidecar path created by dcm2niix\n\n        \"\"\"\n\n        try:\n\n            oldOutput = os.listdir(self.outputDir) != []\n\n        except:\n\n            oldOutput = False\n\n        if oldOutput and force:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"'force' argument is set to True\")\n\n            self.logger.warning(\"Cleaning the previous directory and running dcm2niix\")\n\n            shutil.rmtree(self.outputDir, ignore_errors=True)\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        elif oldOutput:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"Use --forceDcm2niix to rerun dcm2niix\")\n\n        else:\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        self.sidecarFiles = glob(os.path.join(self.outputDir, \"*.json\"))\n\n    def execute(self):\n\n        \"\"\" Execute dcm2niix for each directory in dicomDirs\n\n        \"\"\"\n\n        for dicomDir in self.dicomDirs:\n\n            cmd = ['dcm2niix', *shlex.split(self.options),\n\n                   '-o', self.outputDir, dicomDir]\n\n            output = run_shell_command(cmd)\n\n            try:\n\n                output = output.decode()\n\n            except:\n\n                pass\n\n            self.logger.debug(\"\\n%s\", output)\n\n            self.logger.info(\"Check log file for dcm2niix output\")\n</code></pre>"},{"location":"dcm2bids/dcm2niix/#instance-variables","title":"Instance variables","text":"<pre><code>outputDir\n</code></pre>"},{"location":"dcm2bids/dcm2niix/#methods","title":"Methods","text":""},{"location":"dcm2bids/dcm2niix/#execute","title":"execute","text":"<pre><code>def execute(\n    self\n)\n</code></pre> <p>Execute dcm2niix for each directory in dicomDirs</p> View Source <pre><code>    def execute(self):\n\n        \"\"\" Execute dcm2niix for each directory in dicomDirs\n\n        \"\"\"\n\n        for dicomDir in self.dicomDirs:\n\n            cmd = ['dcm2niix', *shlex.split(self.options),\n\n                   '-o', self.outputDir, dicomDir]\n\n            output = run_shell_command(cmd)\n\n            try:\n\n                output = output.decode()\n\n            except:\n\n                pass\n\n            self.logger.debug(\"\\n%s\", output)\n\n            self.logger.info(\"Check log file for dcm2niix output\")\n</code></pre>"},{"location":"dcm2bids/dcm2niix/#run","title":"run","text":"<pre><code>def run(\n    self,\n    force=False\n)\n</code></pre> <p>Run dcm2niix if necessary</p> <p>Parameters:</p> Name Type Description Default force boolean Forces a cleaning of a previous execution ofdcm2niix None View Source <pre><code>    def run(self, force=False):\n\n        \"\"\" Run dcm2niix if necessary\n\n        Args:\n\n            force (boolean): Forces a cleaning of a previous execution of\n\n                             dcm2niix\n\n        Sets:\n\n            sidecarsFiles (list): A list of sidecar path created by dcm2niix\n\n        \"\"\"\n\n        try:\n\n            oldOutput = os.listdir(self.outputDir) != []\n\n        except:\n\n            oldOutput = False\n\n        if oldOutput and force:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"'force' argument is set to True\")\n\n            self.logger.warning(\"Cleaning the previous directory and running dcm2niix\")\n\n            shutil.rmtree(self.outputDir, ignore_errors=True)\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        elif oldOutput:\n\n            self.logger.warning(\"Previous dcm2niix directory output found:\")\n\n            self.logger.warning(self.outputDir)\n\n            self.logger.warning(\"Use --forceDcm2niix to rerun dcm2niix\")\n\n        else:\n\n            # os.makedirs(self.outputDir, exist_ok=True)\n\n            # python2 compatibility\n\n            if not os.path.exists(self.outputDir):\n\n                os.makedirs(self.outputDir)\n\n            self.execute()\n\n        self.sidecarFiles = glob(os.path.join(self.outputDir, \"*.json\"))\n</code></pre>"},{"location":"dcm2bids/helper/","title":"Module dcm2bids.helper","text":"<p>helper module</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"helper module\"\"\"\n\nimport argparse\n\nimport os\n\nfrom pathlib import Path\n\nimport sys\n\nfrom dcm2bids.dcm2niix import Dcm2niix\n\nfrom dcm2bids.utils import DEFAULT, assert_dirs_empty\n\ndef _build_arg_parser():\n\n    p = argparse.ArgumentParser(description=__doc__, epilog=DEFAULT.EPILOG,\n\n                                formatter_class=argparse.RawTextHelpFormatter)\n\n    p.add_argument(\"-d\", \"--dicom_dir\",\n\n                   type=Path,\n\n                   required=True, nargs=\"+\",\n\n                   help=\"DICOM files directory.\")\n\n    p.add_argument(\"-o\", \"--output_dir\",\n\n                   required=False, default=Path.cwd(),\n\n                   type=Path,\n\n                   help=\"Output BIDS directory. \"\n\n                        \"(Default: %(default)s)\")\n\n    p.add_argument('--force',\n\n                   dest='overwrite', action='store_true',\n\n                   help='Force command to overwrite existing output files.')\n\n    return p\n\ndef main():\n\n    \"\"\"Let's go\"\"\"\n\n    parser = _build_arg_parser()\n\n    args = parser.parse_args()\n\n    out_folder = args.output_dir / DEFAULT.tmpDirName / DEFAULT.helperDir\n\n    assert_dirs_empty(parser, args, out_folder)\n\n    app = Dcm2niix(dicomDirs=args.dicom_dir, bidsDir=args.output_dir)\n\n    rsl = app.run()\n\n    print(f\"Example in: {out_folder}\")\n\n    return rsl\n\nif __name__ == \"__main__\":\n\n    sys.exit(main())\n</code></pre>"},{"location":"dcm2bids/helper/#functions","title":"Functions","text":""},{"location":"dcm2bids/helper/#main","title":"main","text":"<pre><code>def main(\n\n)\n</code></pre> <p>Let's go</p> View Source <pre><code>def main():\n\n    \"\"\"Let's go\"\"\"\n\n    parser = _build_arg_parser()\n\n    args = parser.parse_args()\n\n    out_folder = args.output_dir / DEFAULT.tmpDirName / DEFAULT.helperDir\n\n    assert_dirs_empty(parser, args, out_folder)\n\n    app = Dcm2niix(dicomDirs=args.dicom_dir, bidsDir=args.output_dir)\n\n    rsl = app.run()\n\n    print(f\"Example in: {out_folder}\")\n\n    return rsl\n</code></pre>"},{"location":"dcm2bids/logger/","title":"Module dcm2bids.logger","text":"<p>Setup logging configuration</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"Setup logging configuration\"\"\"\n\nimport logging\n\ndef setup_logging(logLevel, logFile=None):\n\n    \"\"\" Setup logging configuration\"\"\"\n\n    logging.basicConfig()\n\n    logger = logging.getLogger()\n\n    # Check level\n\n    level = getattr(logging, logLevel.upper(), None)\n\n    if not isinstance(level, int):\n\n        raise ValueError(\"Invalid log level: {}\".format(logLevel))\n\n    logger.setLevel(level)\n\n    # Set FileHandler\n\n    if logFile:\n\n        formatter = logging.Formatter(logging.BASIC_FORMAT)\n\n        handler = logging.FileHandler(logFile)\n\n        handler.setFormatter(formatter)\n\n        handler.setLevel(\"DEBUG\")\n\n        logger.addHandler(handler)\n</code></pre>"},{"location":"dcm2bids/logger/#functions","title":"Functions","text":""},{"location":"dcm2bids/logger/#setup_logging","title":"setup_logging","text":"<pre><code>def setup_logging(\n    logLevel,\n    logFile=None\n)\n</code></pre> <p>Setup logging configuration</p> View Source <pre><code>def setup_logging(logLevel, logFile=None):\n\n    \"\"\" Setup logging configuration\"\"\"\n\n    logging.basicConfig()\n\n    logger = logging.getLogger()\n\n    # Check level\n\n    level = getattr(logging, logLevel.upper(), None)\n\n    if not isinstance(level, int):\n\n        raise ValueError(\"Invalid log level: {}\".format(logLevel))\n\n    logger.setLevel(level)\n\n    # Set FileHandler\n\n    if logFile:\n\n        formatter = logging.Formatter(logging.BASIC_FORMAT)\n\n        handler = logging.FileHandler(logFile)\n\n        handler.setFormatter(formatter)\n\n        handler.setLevel(\"DEBUG\")\n\n        logger.addHandler(handler)\n</code></pre>"},{"location":"dcm2bids/scaffold/","title":"Module dcm2bids.scaffold","text":"<p>scaffold module</p> View Source <pre><code>\"\"\"scaffold module\"\"\"\n\nimport sys\n\nimport argparse\n\nimport datetime\n\nimport os\n\nimport shutil\n\nimport importlib.resources as resources\n\nfrom typing import Optional\n\nfrom ..utils import write_txt\n\ndef _get_arguments():\n\n    \"\"\"Load arguments for main\"\"\"\n\n    parser = argparse.ArgumentParser(\n\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n\n        description=\"\"\"\n\n            Create basic BIDS files and directories\n\n            \"\"\",\n\n        epilog=\"\"\"\n\n            Documentation at https://github.com/unfmontreal/Dcm2Bids\n\n            \"\"\",\n\n    )\n\n    parser.add_argument(\n\n        \"-o\",\n\n        \"--output_dir\",\n\n        required=False,\n\n        default=os.getcwd(),\n\n        help=\"Output BIDS directory, Default: current directory\",\n\n    )\n\n    args = parser.parse_args()\n\n    return args\n\ndef scaffold(output_dir_override: Optional[str] = None):\n\n    \"\"\"scaffold entry point\"\"\"\n\n    args = _get_arguments()\n\n    output_dir_ = output_dir_override if output_dir_override is not None else args.output_dir\n\n    for _ in [\"code\", \"derivatives\", \"sourcedata\"]:\n\n        os.makedirs(os.path.join(output_dir_, _), exist_ok=True)\n\n    for _ in [\n\n        \"dataset_description.json\",\n\n        \"participants.json\",\n\n        \"participants.tsv\",\n\n        \"README\",\n\n    ]:\n\n        dest = os.path.join(output_dir_, _)\n\n        with resources.path(__name__, _) as src:\n\n            shutil.copyfile(src, dest)\n\n    with resources.path(__name__, \"CHANGES\") as changes_template:\n\n        with open(changes_template) as _:\n\n            data = _.read().format(datetime.date.today().strftime(\"%Y-%m-%d\"))\n\n        write_txt(\n\n            os.path.join(output_dir_, \"CHANGES\"),\n\n            data.split(\"\\n\")[:-1],\n\n    )\n</code></pre>"},{"location":"dcm2bids/scaffold/#functions","title":"Functions","text":""},{"location":"dcm2bids/scaffold/#scaffold","title":"scaffold","text":"<pre><code>def scaffold(\n    output_dir_override: Optional[str] = None\n)\n</code></pre> <p>scaffold entry point</p> View Source <pre><code>def scaffold(output_dir_override: Optional[str] = None):\n\n    \"\"\"scaffold entry point\"\"\"\n\n    args = _get_arguments()\n\n    output_dir_ = output_dir_override if output_dir_override is not None else args.output_dir\n\n    for _ in [\"code\", \"derivatives\", \"sourcedata\"]:\n\n        os.makedirs(os.path.join(output_dir_, _), exist_ok=True)\n\n    for _ in [\n\n        \"dataset_description.json\",\n\n        \"participants.json\",\n\n        \"participants.tsv\",\n\n        \"README\",\n\n    ]:\n\n        dest = os.path.join(output_dir_, _)\n\n        with resources.path(__name__, _) as src:\n\n            shutil.copyfile(src, dest)\n\n    with resources.path(__name__, \"CHANGES\") as changes_template:\n\n        with open(changes_template) as _:\n\n            data = _.read().format(datetime.date.today().strftime(\"%Y-%m-%d\"))\n\n        write_txt(\n\n            os.path.join(output_dir_, \"CHANGES\"),\n\n            data.split(\"\\n\")[:-1],\n\n    )\n</code></pre>"},{"location":"dcm2bids/sidecar/","title":"Module dcm2bids.sidecar","text":"<p>sidecars classes</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"sidecars classes\"\"\"\n\nimport itertools\n\nimport logging\n\nimport os\n\nimport re\n\nfrom collections import defaultdict, OrderedDict\n\nfrom fnmatch import fnmatch\n\nfrom future.utils import iteritems\n\nfrom .structure import Acquisition\n\nfrom .utils import DEFAULT, load_json, splitext_\n\nclass Sidecar(object):\n\n    \"\"\" A sidecar object\n\n    Args:\n\n        filename (str): Path of a JSON sidecar\n\n        keyComp (list): A list of keys from the JSON sidecar to compare sidecars\n\n                     default=[\"SeriesNumber\",\"AcquisitionTime\",\"SideCarFilename\"]\n\n    \"\"\"\n\n    def __init__(self, filename, compKeys=DEFAULT.compKeys):\n\n        self._origData = {}\n\n        self._data = {}\n\n        self.filename = filename\n\n        self.root, _ = splitext_(filename)\n\n        self.data = filename\n\n        self.compKeys = compKeys\n\n    def __lt__(self, other):\n\n        lts = []\n\n        for key in self.compKeys:\n\n            try:\n\n                if all(key in d for d in (self.data, other.data)):\n\n                    if self.data.get(key) == other.data.get(key):\n\n                        lts.append(None)\n\n                    else:\n\n                        lts.append(self.data.get(key) &lt; other.data.get(key))\n\n                else:\n\n                    lts.append(None)\n\n            except:\n\n                lts.append(None)\n\n        for lt in lts:\n\n            if lt is not None:\n\n                return lt\n\n    def __eq__(self, other):\n\n        return self.data == other.data\n\n    def __hash__(self):\n\n        return hash(self.filename)\n\n    @property\n\n    def origData(self):\n\n        return self._origData\n\n    @property\n\n    def data(self):\n\n        return self._data\n\n    @data.setter\n\n    def data(self, filename):\n\n        \"\"\"\n\n        Args:\n\n            filename (path): path of a JSON file\n\n        Return:\n\n            A dictionnary of the JSON content plus the SidecarFilename\n\n        \"\"\"\n\n        try:\n\n            data = load_json(filename)\n\n        except:\n\n            data = {}\n\n        self._origData = data.copy()\n\n        data[\"SidecarFilename\"] = os.path.basename(filename)\n\n        self._data = data\n\nclass SidecarPairing(object):\n\n    \"\"\"\n\n    Args:\n\n        sidecars (list): List of Sidecar objects\n\n        descriptions (list): List of dictionaries describing acquisitions\n\n    \"\"\"\n\n    def __init__(self, sidecars, descriptions, searchMethod=DEFAULT.searchMethod,\n\n                 caseSensitive=DEFAULT.caseSensitive):\n\n        self.logger = logging.getLogger(__name__)\n\n        self._searchMethod = \"\"\n\n        self.graph = OrderedDict()\n\n        self.acquisitions = []\n\n        self.sidecars = sidecars\n\n        self.descriptions = descriptions\n\n        self.searchMethod = searchMethod\n\n        self.caseSensitive = caseSensitive\n\n    @property\n\n    def searchMethod(self):\n\n        return self._searchMethod\n\n    @searchMethod.setter\n\n    def searchMethod(self, value):\n\n        \"\"\"\n\n        Checks if the search method is implemented\n\n        Warns the user if not and fall back to default\n\n        \"\"\"\n\n        if value in DEFAULT.searchMethodChoices:\n\n            self._searchMethod = value\n\n        else:\n\n            self._searchMethod = DEFAULT.searchMethod\n\n            self.logger.warning(\"'%s' is not a search method implemented\", value)\n\n            self.logger.warning(\n\n                \"Falling back to default: %s\", DEFAULT.searchMethod\n\n            )\n\n            self.logger.warning(\n\n                \"Search methods implemented: %s\", DEFAULT.searchMethodChoices\n\n            )\n\n    @property\n\n    def caseSensitive(self):\n\n        return self._caseSensitive\n\n    @caseSensitive.setter\n\n    def caseSensitive(self, value):\n\n        if isinstance(value, bool):\n\n            self._caseSensitive = value\n\n        else:\n\n            self._caseSensitive = DEFAULT.caseSensitive\n\n            self.logger.warning(\"'%s' is not a boolean\", value)\n\n            self.logger.warning(\n\n                \"Falling back to default: %s\", DEFAULT.caseSensitive\n\n            )\n\n            self.logger.warning(\n\n                \"Search methods implemented: %s\", DEFAULT.caseSensitive\n\n            )\n\n    def build_graph(self):\n\n        \"\"\"\n\n        Test all the possible links between the list of sidecars and the\n\n        description dictionaries and build a graph from it\n\n        The graph is in a OrderedDict object. The keys are the Sidecars and\n\n        the values are a list of possible descriptions\n\n        Returns:\n\n            A graph (OrderedDict)\n\n        \"\"\"\n\n        graph = OrderedDict((_, []) for _ in self.sidecars)\n\n        possibleLinks = itertools.product(self.sidecars, self.descriptions)\n\n        for sidecar, description in possibleLinks:\n\n            criteria = description.get(\"criteria\", None)\n\n            if criteria and self.isLink(sidecar.data, criteria):\n\n                graph[sidecar].append(description)\n\n        self.graph = graph\n\n        return graph\n\n    def isLink(self, data, criteria):\n\n        \"\"\"\n\n        Args:\n\n            data (dict): Dictionnary data of a sidecar\n\n            criteria (dict): Dictionnary criteria\n\n        Returns:\n\n            boolean\n\n        \"\"\"\n\n        def compare(name, pattern):\n\n            name = str(name)\n\n            if self.searchMethod == \"re\":\n\n                return bool(re.match(pattern, name))\n\n            else:\n\n                pattern = str(pattern)\n\n                if not self.caseSensitive:\n\n                    name = name.lower()\n\n                    pattern = pattern.lower()\n\n                return fnmatch(name, pattern)\n\n        result = []\n\n        for tag, pattern in iteritems(criteria):\n\n            name = data.get(tag, '')\n\n            if isinstance(name, list):\n\n                try:\n\n                    subResult = [len(name) == len(pattern), isinstance(pattern, list)]\n\n                    for subName, subPattern in zip(name, pattern):\n\n                        subResult.append(compare(subName, subPattern))\n\n                except:\n\n                    subResult = [False]\n\n                result.append(all(subResult))\n\n            else:\n\n                result.append(compare(name, pattern))\n\n        return all(result)\n\n    def build_acquisitions(self, participant):\n\n        \"\"\"\n\n        Args:\n\n            participant (Participant): Participant object to create acquisitions\n\n        Returns:\n\n            A list of acquisition objects\n\n        \"\"\"\n\n        acquisitions = []\n\n        acquisitions_intendedFor = []\n\n        self.logger.info(\"Sidecars pairing:\")\n\n        for sidecar, valid_descriptions in iteritems(self.graph):\n\n            sidecarName = os.path.basename(sidecar.root)\n\n            # only one description for the sidecar\n\n            if len(valid_descriptions) == 1:\n\n                desc = valid_descriptions[0]\n\n                acq = Acquisition(participant,\n\n                                  srcSidecar=sidecar, **desc)\n\n                acq.indexSidecar = self.descriptions.index(desc)\n\n                acq.setDstFile()\n\n                if acq.intendedFor != [None]:\n\n                    acquisitions_intendedFor.append(acq)\n\n                else:\n\n                    acquisitions.append(acq)\n\n                self.logger.info(\"%s  &lt;-  %s\", acq.suffix, sidecarName)\n\n            # sidecar with no link\n\n            elif len(valid_descriptions) == 0:\n\n                self.logger.info(\"No Pairing  &lt;-  %s\", sidecarName)\n\n            # sidecar with several links\n\n            else:\n\n                self.logger.warning(\"Several Pairing  &lt;-  %s\", sidecarName)\n\n                for desc in valid_descriptions:\n\n                    acq = Acquisition(participant,\n\n                                      indexSidecar=self.descriptions.index(desc),\n\n                                      **desc)\n\n                    self.logger.warning(\"    -&gt;  %s\", acq.suffix)\n\n        self.acquisitions = acquisitions + acquisitions_intendedFor\n\n        return self.acquisitions\n\n    def find_runs(self):\n\n        \"\"\"\n\n        Check if there is duplicate destination roots in the acquisitions\n\n        and add '_run-' to the customLabels of the acquisition\n\n        \"\"\"\n\n        def duplicates(seq):\n\n            \"\"\" Find duplicate items in a list\n\n            Args:\n\n                seq (list)\n\n            Yield:\n\n                A tuple of 2 items (item, list of index)\n\n            ref: http://stackoverflow.com/a/5419576\n\n            \"\"\"\n\n            tally = defaultdict(list)\n\n            for i, item in enumerate(seq):\n\n                tally[item].append(i)\n\n            for key, locs in iteritems(tally):\n\n                if len(locs) &gt; 1:\n\n                    yield key, locs\n\n        dstRoots = [_.dstRoot for _ in self.acquisitions]\n\n        for dstRoot, dup in duplicates(dstRoots):\n\n            self.logger.info(\"%s has %s runs\", dstRoot, len(dup))\n\n            self.logger.info(\"Adding 'run' information to the acquisition\")\n\n            for runNum, acqInd in enumerate(dup):\n\n                runStr = DEFAULT.runTpl.format(runNum + 1)\n\n                self.acquisitions[acqInd].customLabels += runStr\n</code></pre>"},{"location":"dcm2bids/sidecar/#classes","title":"Classes","text":""},{"location":"dcm2bids/sidecar/#sidecar","title":"Sidecar","text":"<pre><code>class Sidecar(\n    filename,\n    compKeys=['SeriesNumber', 'AcquisitionTime', 'SidecarFilename']\n)\n</code></pre> <p>A sidecar object</p>"},{"location":"dcm2bids/sidecar/#attributes","title":"Attributes","text":"Name Type Description Default filename str Path of a JSON sidecar None keyComp list A list of keys from the JSON sidecar to compare sidecarsdefault=[\"SeriesNumber\",\"AcquisitionTime\",\"SideCarFilename\"] None View Source <pre><code>class Sidecar(object):\n\n    \"\"\" A sidecar object\n\n    Args:\n\n        filename (str): Path of a JSON sidecar\n\n        keyComp (list): A list of keys from the JSON sidecar to compare sidecars\n\n                     default=[\"SeriesNumber\",\"AcquisitionTime\",\"SideCarFilename\"]\n\n    \"\"\"\n\n    def __init__(self, filename, compKeys=DEFAULT.compKeys):\n\n        self._origData = {}\n\n        self._data = {}\n\n        self.filename = filename\n\n        self.root, _ = splitext_(filename)\n\n        self.data = filename\n\n        self.compKeys = compKeys\n\n    def __lt__(self, other):\n\n        lts = []\n\n        for key in self.compKeys:\n\n            try:\n\n                if all(key in d for d in (self.data, other.data)):\n\n                    if self.data.get(key) == other.data.get(key):\n\n                        lts.append(None)\n\n                    else:\n\n                        lts.append(self.data.get(key) &lt; other.data.get(key))\n\n                else:\n\n                    lts.append(None)\n\n            except:\n\n                lts.append(None)\n\n        for lt in lts:\n\n            if lt is not None:\n\n                return lt\n\n    def __eq__(self, other):\n\n        return self.data == other.data\n\n    def __hash__(self):\n\n        return hash(self.filename)\n\n    @property\n\n    def origData(self):\n\n        return self._origData\n\n    @property\n\n    def data(self):\n\n        return self._data\n\n    @data.setter\n\n    def data(self, filename):\n\n        \"\"\"\n\n        Args:\n\n            filename (path): path of a JSON file\n\n        Return:\n\n            A dictionnary of the JSON content plus the SidecarFilename\n\n        \"\"\"\n\n        try:\n\n            data = load_json(filename)\n\n        except:\n\n            data = {}\n\n        self._origData = data.copy()\n\n        data[\"SidecarFilename\"] = os.path.basename(filename)\n\n        self._data = data\n</code></pre>"},{"location":"dcm2bids/sidecar/#instance-variables","title":"Instance variables","text":"<pre><code>data\n</code></pre> <pre><code>origData\n</code></pre>"},{"location":"dcm2bids/sidecar/#sidecarpairing","title":"SidecarPairing","text":"<pre><code>class SidecarPairing(\n    sidecars,\n    descriptions,\n    searchMethod='fnmatch',\n    caseSensitive=True\n)\n</code></pre> <p>Args:</p> <p>sidecars (list): List of Sidecar objects descriptions (list): List of dictionaries describing acquisitions</p> View Source <pre><code>class SidecarPairing(object):\n\n    \"\"\"\n\n    Args:\n\n        sidecars (list): List of Sidecar objects\n\n        descriptions (list): List of dictionaries describing acquisitions\n\n    \"\"\"\n\n    def __init__(self, sidecars, descriptions, searchMethod=DEFAULT.searchMethod,\n\n                 caseSensitive=DEFAULT.caseSensitive):\n\n        self.logger = logging.getLogger(__name__)\n\n        self._searchMethod = \"\"\n\n        self.graph = OrderedDict()\n\n        self.acquisitions = []\n\n        self.sidecars = sidecars\n\n        self.descriptions = descriptions\n\n        self.searchMethod = searchMethod\n\n        self.caseSensitive = caseSensitive\n\n    @property\n\n    def searchMethod(self):\n\n        return self._searchMethod\n\n    @searchMethod.setter\n\n    def searchMethod(self, value):\n\n        \"\"\"\n\n        Checks if the search method is implemented\n\n        Warns the user if not and fall back to default\n\n        \"\"\"\n\n        if value in DEFAULT.searchMethodChoices:\n\n            self._searchMethod = value\n\n        else:\n\n            self._searchMethod = DEFAULT.searchMethod\n\n            self.logger.warning(\"'%s' is not a search method implemented\", value)\n\n            self.logger.warning(\n\n                \"Falling back to default: %s\", DEFAULT.searchMethod\n\n            )\n\n            self.logger.warning(\n\n                \"Search methods implemented: %s\", DEFAULT.searchMethodChoices\n\n            )\n\n    @property\n\n    def caseSensitive(self):\n\n        return self._caseSensitive\n\n    @caseSensitive.setter\n\n    def caseSensitive(self, value):\n\n        if isinstance(value, bool):\n\n            self._caseSensitive = value\n\n        else:\n\n            self._caseSensitive = DEFAULT.caseSensitive\n\n            self.logger.warning(\"'%s' is not a boolean\", value)\n\n            self.logger.warning(\n\n                \"Falling back to default: %s\", DEFAULT.caseSensitive\n\n            )\n\n            self.logger.warning(\n\n                \"Search methods implemented: %s\", DEFAULT.caseSensitive\n\n            )\n\n    def build_graph(self):\n\n        \"\"\"\n\n        Test all the possible links between the list of sidecars and the\n\n        description dictionaries and build a graph from it\n\n        The graph is in a OrderedDict object. The keys are the Sidecars and\n\n        the values are a list of possible descriptions\n\n        Returns:\n\n            A graph (OrderedDict)\n\n        \"\"\"\n\n        graph = OrderedDict((_, []) for _ in self.sidecars)\n\n        possibleLinks = itertools.product(self.sidecars, self.descriptions)\n\n        for sidecar, description in possibleLinks:\n\n            criteria = description.get(\"criteria\", None)\n\n            if criteria and self.isLink(sidecar.data, criteria):\n\n                graph[sidecar].append(description)\n\n        self.graph = graph\n\n        return graph\n\n    def isLink(self, data, criteria):\n\n        \"\"\"\n\n        Args:\n\n            data (dict): Dictionnary data of a sidecar\n\n            criteria (dict): Dictionnary criteria\n\n        Returns:\n\n            boolean\n\n        \"\"\"\n\n        def compare(name, pattern):\n\n            name = str(name)\n\n            if self.searchMethod == \"re\":\n\n                return bool(re.match(pattern, name))\n\n            else:\n\n                pattern = str(pattern)\n\n                if not self.caseSensitive:\n\n                    name = name.lower()\n\n                    pattern = pattern.lower()\n\n                return fnmatch(name, pattern)\n\n        result = []\n\n        for tag, pattern in iteritems(criteria):\n\n            name = data.get(tag, '')\n\n            if isinstance(name, list):\n\n                try:\n\n                    subResult = [len(name) == len(pattern), isinstance(pattern, list)]\n\n                    for subName, subPattern in zip(name, pattern):\n\n                        subResult.append(compare(subName, subPattern))\n\n                except:\n\n                    subResult = [False]\n\n                result.append(all(subResult))\n\n            else:\n\n                result.append(compare(name, pattern))\n\n        return all(result)\n\n    def build_acquisitions(self, participant):\n\n        \"\"\"\n\n        Args:\n\n            participant (Participant): Participant object to create acquisitions\n\n        Returns:\n\n            A list of acquisition objects\n\n        \"\"\"\n\n        acquisitions = []\n\n        acquisitions_intendedFor = []\n\n        self.logger.info(\"Sidecars pairing:\")\n\n        for sidecar, valid_descriptions in iteritems(self.graph):\n\n            sidecarName = os.path.basename(sidecar.root)\n\n            # only one description for the sidecar\n\n            if len(valid_descriptions) == 1:\n\n                desc = valid_descriptions[0]\n\n                acq = Acquisition(participant,\n\n                                  srcSidecar=sidecar, **desc)\n\n                acq.indexSidecar = self.descriptions.index(desc)\n\n                acq.setDstFile()\n\n                if acq.intendedFor != [None]:\n\n                    acquisitions_intendedFor.append(acq)\n\n                else:\n\n                    acquisitions.append(acq)\n\n                self.logger.info(\"%s  &lt;-  %s\", acq.suffix, sidecarName)\n\n            # sidecar with no link\n\n            elif len(valid_descriptions) == 0:\n\n                self.logger.info(\"No Pairing  &lt;-  %s\", sidecarName)\n\n            # sidecar with several links\n\n            else:\n\n                self.logger.warning(\"Several Pairing  &lt;-  %s\", sidecarName)\n\n                for desc in valid_descriptions:\n\n                    acq = Acquisition(participant,\n\n                                      indexSidecar=self.descriptions.index(desc),\n\n                                      **desc)\n\n                    self.logger.warning(\"    -&gt;  %s\", acq.suffix)\n\n        self.acquisitions = acquisitions + acquisitions_intendedFor\n\n        return self.acquisitions\n\n    def find_runs(self):\n\n        \"\"\"\n\n        Check if there is duplicate destination roots in the acquisitions\n\n        and add '_run-' to the customLabels of the acquisition\n\n        \"\"\"\n\n        def duplicates(seq):\n\n            \"\"\" Find duplicate items in a list\n\n            Args:\n\n                seq (list)\n\n            Yield:\n\n                A tuple of 2 items (item, list of index)\n\n            ref: http://stackoverflow.com/a/5419576\n\n            \"\"\"\n\n            tally = defaultdict(list)\n\n            for i, item in enumerate(seq):\n\n                tally[item].append(i)\n\n            for key, locs in iteritems(tally):\n\n                if len(locs) &gt; 1:\n\n                    yield key, locs\n\n        dstRoots = [_.dstRoot for _ in self.acquisitions]\n\n        for dstRoot, dup in duplicates(dstRoots):\n\n            self.logger.info(\"%s has %s runs\", dstRoot, len(dup))\n\n            self.logger.info(\"Adding 'run' information to the acquisition\")\n\n            for runNum, acqInd in enumerate(dup):\n\n                runStr = DEFAULT.runTpl.format(runNum + 1)\n\n                self.acquisitions[acqInd].customLabels += runStr\n</code></pre>"},{"location":"dcm2bids/sidecar/#instance-variables_1","title":"Instance variables","text":"<pre><code>caseSensitive\n</code></pre> <pre><code>searchMethod\n</code></pre>"},{"location":"dcm2bids/sidecar/#methods","title":"Methods","text":""},{"location":"dcm2bids/sidecar/#build_acquisitions","title":"build_acquisitions","text":"<pre><code>def build_acquisitions(\n    self,\n    participant\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default participant Participant Participant object to create acquisitions None <p>Returns:</p> Type Description None A list of acquisition objects View Source <pre><code>    def build_acquisitions(self, participant):\n\n        \"\"\"\n\n        Args:\n\n            participant (Participant): Participant object to create acquisitions\n\n        Returns:\n\n            A list of acquisition objects\n\n        \"\"\"\n\n        acquisitions = []\n\n        acquisitions_intendedFor = []\n\n        self.logger.info(\"Sidecars pairing:\")\n\n        for sidecar, valid_descriptions in iteritems(self.graph):\n\n            sidecarName = os.path.basename(sidecar.root)\n\n            # only one description for the sidecar\n\n            if len(valid_descriptions) == 1:\n\n                desc = valid_descriptions[0]\n\n                acq = Acquisition(participant,\n\n                                  srcSidecar=sidecar, **desc)\n\n                acq.indexSidecar = self.descriptions.index(desc)\n\n                acq.setDstFile()\n\n                if acq.intendedFor != [None]:\n\n                    acquisitions_intendedFor.append(acq)\n\n                else:\n\n                    acquisitions.append(acq)\n\n                self.logger.info(\"%s  &lt;-  %s\", acq.suffix, sidecarName)\n\n            # sidecar with no link\n\n            elif len(valid_descriptions) == 0:\n\n                self.logger.info(\"No Pairing  &lt;-  %s\", sidecarName)\n\n            # sidecar with several links\n\n            else:\n\n                self.logger.warning(\"Several Pairing  &lt;-  %s\", sidecarName)\n\n                for desc in valid_descriptions:\n\n                    acq = Acquisition(participant,\n\n                                      indexSidecar=self.descriptions.index(desc),\n\n                                      **desc)\n\n                    self.logger.warning(\"    -&gt;  %s\", acq.suffix)\n\n        self.acquisitions = acquisitions + acquisitions_intendedFor\n\n        return self.acquisitions\n</code></pre>"},{"location":"dcm2bids/sidecar/#build_graph","title":"build_graph","text":"<pre><code>def build_graph(\n    self\n)\n</code></pre> <p>Test all the possible links between the list of sidecars and the</p> <p>description dictionaries and build a graph from it The graph is in a OrderedDict object. The keys are the Sidecars and the values are a list of possible descriptions</p> <p>Returns:</p> Type Description None A graph (OrderedDict) View Source <pre><code>    def build_graph(self):\n\n        \"\"\"\n\n        Test all the possible links between the list of sidecars and the\n\n        description dictionaries and build a graph from it\n\n        The graph is in a OrderedDict object. The keys are the Sidecars and\n\n        the values are a list of possible descriptions\n\n        Returns:\n\n            A graph (OrderedDict)\n\n        \"\"\"\n\n        graph = OrderedDict((_, []) for _ in self.sidecars)\n\n        possibleLinks = itertools.product(self.sidecars, self.descriptions)\n\n        for sidecar, description in possibleLinks:\n\n            criteria = description.get(\"criteria\", None)\n\n            if criteria and self.isLink(sidecar.data, criteria):\n\n                graph[sidecar].append(description)\n\n        self.graph = graph\n\n        return graph\n</code></pre>"},{"location":"dcm2bids/sidecar/#find_runs","title":"find_runs","text":"<pre><code>def find_runs(\n    self\n)\n</code></pre> <p>Check if there is duplicate destination roots in the acquisitions</p> <p>and add '_run-' to the customLabels of the acquisition</p> View Source <pre><code>    def find_runs(self):\n\n        \"\"\"\n\n        Check if there is duplicate destination roots in the acquisitions\n\n        and add '_run-' to the customLabels of the acquisition\n\n        \"\"\"\n\n        def duplicates(seq):\n\n            \"\"\" Find duplicate items in a list\n\n            Args:\n\n                seq (list)\n\n            Yield:\n\n                A tuple of 2 items (item, list of index)\n\n            ref: http://stackoverflow.com/a/5419576\n\n            \"\"\"\n\n            tally = defaultdict(list)\n\n            for i, item in enumerate(seq):\n\n                tally[item].append(i)\n\n            for key, locs in iteritems(tally):\n\n                if len(locs) &gt; 1:\n\n                    yield key, locs\n\n        dstRoots = [_.dstRoot for _ in self.acquisitions]\n\n        for dstRoot, dup in duplicates(dstRoots):\n\n            self.logger.info(\"%s has %s runs\", dstRoot, len(dup))\n\n            self.logger.info(\"Adding 'run' information to the acquisition\")\n\n            for runNum, acqInd in enumerate(dup):\n\n                runStr = DEFAULT.runTpl.format(runNum + 1)\n\n                self.acquisitions[acqInd].customLabels += runStr\n</code></pre>"},{"location":"dcm2bids/sidecar/#islink","title":"isLink","text":"<pre><code>def isLink(\n    self,\n    data,\n    criteria\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default data dict Dictionnary data of a sidecar None criteria dict Dictionnary criteria None <p>Returns:</p> Type Description None boolean View Source <pre><code>    def isLink(self, data, criteria):\n\n        \"\"\"\n\n        Args:\n\n            data (dict): Dictionnary data of a sidecar\n\n            criteria (dict): Dictionnary criteria\n\n        Returns:\n\n            boolean\n\n        \"\"\"\n\n        def compare(name, pattern):\n\n            name = str(name)\n\n            if self.searchMethod == \"re\":\n\n                return bool(re.match(pattern, name))\n\n            else:\n\n                pattern = str(pattern)\n\n                if not self.caseSensitive:\n\n                    name = name.lower()\n\n                    pattern = pattern.lower()\n\n                return fnmatch(name, pattern)\n\n        result = []\n\n        for tag, pattern in iteritems(criteria):\n\n            name = data.get(tag, '')\n\n            if isinstance(name, list):\n\n                try:\n\n                    subResult = [len(name) == len(pattern), isinstance(pattern, list)]\n\n                    for subName, subPattern in zip(name, pattern):\n\n                        subResult.append(compare(subName, subPattern))\n\n                except:\n\n                    subResult = [False]\n\n                result.append(all(subResult))\n\n            else:\n\n                result.append(compare(name, pattern))\n\n        return all(result)\n</code></pre>"},{"location":"dcm2bids/structure/","title":"Module dcm2bids.structure","text":"<p>Participant class</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"Participant class\"\"\"\n\nimport logging\n\nfrom os.path import join as opj\n\nfrom future.utils import iteritems\n\nfrom .utils import DEFAULT\n\nfrom .version import __version__\n\nclass Participant(object):\n\n    \"\"\" Class representing a participant\n\n    Args:\n\n        name (str): Label of your participant\n\n        session (str): Optional label of a session\n\n    \"\"\"\n\n    def __init__(self, name, session=DEFAULT.session):\n\n        self._name = \"\"\n\n        self._session = \"\"\n\n        self.name = name\n\n        self.session = session\n\n    @property\n\n    def name(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string 'sub-&lt;subject_label&gt;'\n\n        \"\"\"\n\n        return self._name\n\n    @name.setter\n\n    def name(self, name):\n\n        \"\"\" Prepend 'sub-' if necessary\"\"\"\n\n        if name.startswith(\"sub-\"):\n\n            self._name = name\n\n        else:\n\n            self._name = \"sub-\" + name\n\n    @property\n\n    def session(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string 'ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        return self._session\n\n    @session.setter\n\n    def session(self, session):\n\n        \"\"\" Prepend 'ses-' if necessary\"\"\"\n\n        if session.strip() == \"\":\n\n            self._session = \"\"\n\n        elif session.startswith(\"ses-\"):\n\n            self._session = session\n\n        else:\n\n            self._session = \"ses-\" + session\n\n    @property\n\n    def directory(self):\n\n        \"\"\" The directory of the participant\n\n        Returns:\n\n            A path 'sub-&lt;subject_label&gt;' or\n\n            'sub-&lt;subject_label&gt;/ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        if self.hasSession():\n\n            return opj(self.name, self.session)\n\n        else:\n\n            return self.name\n\n    @property\n\n    def prefix(self):\n\n        \"\"\" The prefix to build filenames\n\n        Returns:\n\n            A string 'sub-&lt;subject_label&gt;' or\n\n            'sub-&lt;subject_label&gt;_ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        if self.hasSession():\n\n            return self.name + \"_\" + self.session\n\n        else:\n\n            return self.name\n\n    def hasSession(self):\n\n        \"\"\" Check if a session is set\n\n        Returns:\n\n            Boolean\n\n        \"\"\"\n\n        return self.session.strip() != DEFAULT.session\n\nclass Acquisition(object):\n\n    \"\"\" Class representing an acquisition\n\n    Args:\n\n        participant (Participant): A participant object\n\n        dataType (str): A functional group of MRI data (ex: func, anat ...)\n\n        modalityLabel (str): The modality of the acquisition\n\n                (ex: T1w, T2w, bold ...)\n\n        customLabels (str): Optional labels (ex: task-rest)\n\n        srcSidecar (Sidecar): Optional sidecar object\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        participant,\n\n        dataType,\n\n        modalityLabel,\n\n        indexSidecar=None,\n\n        customLabels=\"\",\n\n        srcSidecar=None,\n\n        sidecarChanges=None,\n\n        intendedFor=None,\n\n        IntendedFor=None,\n\n        **kwargs\n\n    ):\n\n        self.logger = logging.getLogger(__name__)\n\n        self._modalityLabel = \"\"\n\n        self._customLabels = \"\"\n\n        self._intendedFor = None\n\n        self._indexSidecar = None\n\n        self.participant = participant\n\n        self.dataType = dataType\n\n        self.modalityLabel = modalityLabel\n\n        self.customLabels = customLabels\n\n        self.srcSidecar = srcSidecar\n\n        if sidecarChanges is None:\n\n            self.sidecarChanges = {}\n\n        else:\n\n            self.sidecarChanges = sidecarChanges\n\n        if intendedFor is None:\n\n            self.intendedFor = IntendedFor\n\n        else:\n\n            self.intendedFor = intendedFor\n\n        self.dstFile = ''\n\n    def __eq__(self, other):\n\n        return (\n\n            self.dataType == other.dataType\n\n            and self.participant.prefix == other.participant.prefix\n\n            and self.suffix == other.suffix\n\n        )\n\n    @property\n\n    def modalityLabel(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string '_&lt;modalityLabel&gt;'\n\n        \"\"\"\n\n        return self._modalityLabel\n\n    @modalityLabel.setter\n\n    def modalityLabel(self, modalityLabel):\n\n        \"\"\" Prepend '_' if necessary\"\"\"\n\n        self._modalityLabel = self.prepend(modalityLabel)\n\n    @property\n\n    def customLabels(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string '_&lt;customLabels&gt;'\n\n        \"\"\"\n\n        return self._customLabels\n\n    @customLabels.setter\n\n    def customLabels(self, customLabels):\n\n        \"\"\" Prepend '_' if necessary\"\"\"\n\n        self._customLabels = self.prepend(customLabels)\n\n    @property\n\n    def suffix(self):\n\n        \"\"\" The suffix to build filenames\n\n        Returns:\n\n            A string '_&lt;modalityLabel&gt;' or '_&lt;customLabels&gt;_&lt;modalityLabel&gt;'\n\n        \"\"\"\n\n        if self.customLabels.strip() == \"\":\n\n            return self.modalityLabel\n\n        else:\n\n            return self.customLabels + self.modalityLabel\n\n    @property\n\n    def srcRoot(self):\n\n        \"\"\"\n\n        Return:\n\n            The sidecar source root to move\n\n        \"\"\"\n\n        if self.srcSidecar:\n\n            return self.srcSidecar.root\n\n        else:\n\n            return None\n\n    @property\n\n    def dstRoot(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination root inside the BIDS structure\n\n        \"\"\"\n\n        return opj(\n\n            self.participant.directory,\n\n            self.dataType,\n\n            self.dstFile,\n\n        )\n\n    @property\n\n    def dstIntendedFor(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination root inside the BIDS structure for intendedFor\n\n        \"\"\"\n\n        return opj(\n\n            self.participant.session,\n\n            self.dataType,\n\n            self.dstFile,\n\n        )\n\n    def setDstFile(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination filename formatted following the v1.7.0 BIDS entity key table\n\n            https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html\n\n        \"\"\"\n\n        current_name = self.participant.prefix + self.suffix\n\n        new_name = ''\n\n        current_dict = dict(x.split(\"-\") for x in current_name.split(\"_\") if len(x.split('-')) == 2)\n\n        suffix_list = [x for x in current_name.split(\"_\") if len(x.split('-')) == 1]\n\n        for current_key in DEFAULT.entityTableKeys:\n\n            if current_key in current_dict and new_name != '':\n\n                new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n            elif current_key in current_dict:\n\n                new_name = f\"{current_key}-{current_dict[current_key]}\"\n\n            current_dict.pop(current_key, None)\n\n        for current_key in current_dict:\n\n            new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n        if current_dict:\n\n            self.logger.warning(\"Entity \\\"{}\\\"\".format(list(current_dict.keys())) +\n\n                                \" is not a valid BIDS entity.\")\n\n        new_name += f\"_{'_'.join(suffix_list)}\"  # Allow multiple single keys (without value)\n\n        if len(suffix_list) != 1:\n\n            self.logger.warning(\"There was more than one suffix found \"\n\n                                f\"({suffix_list}). This is not BIDS \"\n\n                                \"compliant. Make sure you know what \"\n\n                                \"you are doing.\")\n\n        if current_name != new_name:\n\n            self.logger.warning(\n\n                f\"\"\"\u2705 Filename was reordered according to BIDS entity table order:\n\n                from:   {current_name}\n\n                to:     {new_name}\"\"\")\n\n        self.dstFile = new_name\n\n    @property\n\n    def intendedFor(self):\n\n        return self._intendedFor\n\n    @intendedFor.setter\n\n    def intendedFor(self, value):\n\n        if isinstance(value, list):\n\n            self._intendedFor = value\n\n        else:\n\n            self._intendedFor = [value]\n\n    @property\n\n    def indexSidecar(self):\n\n        \"\"\"\n\n        Returns:\n\n            A int '_&lt;indexSidecar&gt;'\n\n        \"\"\"\n\n        return self._indexSidecar\n\n    @indexSidecar.setter\n\n    def indexSidecar(self, value):\n\n        \"\"\"\n\n        Returns:\n\n            A int '_&lt;indexSidecar&gt;'\n\n        \"\"\"\n\n        self._indexSidecar = value\n\n    def dstSidecarData(self, descriptions, intendedForList):\n\n        \"\"\"\n\n        \"\"\"\n\n        data = self.srcSidecar.origData\n\n        data[\"Dcm2bidsVersion\"] = __version__\n\n        # intendedFor key\n\n        if self.intendedFor != [None]:\n\n            intendedValue = []\n\n            for index in self.intendedFor:\n\n                intendedValue = intendedValue + intendedForList[index]\n\n            if len(intendedValue) == 1:\n\n                data[\"IntendedFor\"] = intendedValue[0]\n\n            else:\n\n                data[\"IntendedFor\"] = intendedValue\n\n        # sidecarChanges\n\n        for key, value in iteritems(self.sidecarChanges):\n\n            data[key] = value\n\n        return data\n\n    @staticmethod\n\n    def prepend(value, char=\"_\"):\n\n        \"\"\" Prepend `char` to `value` if necessary\n\n        Args:\n\n            value (str)\n\n            char (str)\n\n        \"\"\"\n\n        if value.strip() == \"\":\n\n            return \"\"\n\n        elif value.startswith(char):\n\n            return value\n\n        else:\n\n            return char + value\n</code></pre>"},{"location":"dcm2bids/structure/#classes","title":"Classes","text":""},{"location":"dcm2bids/structure/#acquisition","title":"Acquisition","text":"<pre><code>class Acquisition(\n    participant,\n    dataType,\n    modalityLabel,\n    indexSidecar=None,\n    customLabels='',\n    srcSidecar=None,\n    sidecarChanges=None,\n    intendedFor=None,\n    IntendedFor=None,\n    **kwargs\n)\n</code></pre> <p>Class representing an acquisition</p>"},{"location":"dcm2bids/structure/#attributes","title":"Attributes","text":"Name Type Description Default participant Participant A participant object None dataType str A functional group of MRI data (ex: func, anat ...) None modalityLabel str The modality of the acquisition(ex: T1w, T2w, bold ...) None customLabels str Optional labels (ex: task-rest) None srcSidecar Sidecar Optional sidecar object None View Source <pre><code>class Acquisition(object):\n\n    \"\"\" Class representing an acquisition\n\n    Args:\n\n        participant (Participant): A participant object\n\n        dataType (str): A functional group of MRI data (ex: func, anat ...)\n\n        modalityLabel (str): The modality of the acquisition\n\n                (ex: T1w, T2w, bold ...)\n\n        customLabels (str): Optional labels (ex: task-rest)\n\n        srcSidecar (Sidecar): Optional sidecar object\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        participant,\n\n        dataType,\n\n        modalityLabel,\n\n        indexSidecar=None,\n\n        customLabels=\"\",\n\n        srcSidecar=None,\n\n        sidecarChanges=None,\n\n        intendedFor=None,\n\n        IntendedFor=None,\n\n        **kwargs\n\n    ):\n\n        self.logger = logging.getLogger(__name__)\n\n        self._modalityLabel = \"\"\n\n        self._customLabels = \"\"\n\n        self._intendedFor = None\n\n        self._indexSidecar = None\n\n        self.participant = participant\n\n        self.dataType = dataType\n\n        self.modalityLabel = modalityLabel\n\n        self.customLabels = customLabels\n\n        self.srcSidecar = srcSidecar\n\n        if sidecarChanges is None:\n\n            self.sidecarChanges = {}\n\n        else:\n\n            self.sidecarChanges = sidecarChanges\n\n        if intendedFor is None:\n\n            self.intendedFor = IntendedFor\n\n        else:\n\n            self.intendedFor = intendedFor\n\n        self.dstFile = ''\n\n    def __eq__(self, other):\n\n        return (\n\n            self.dataType == other.dataType\n\n            and self.participant.prefix == other.participant.prefix\n\n            and self.suffix == other.suffix\n\n        )\n\n    @property\n\n    def modalityLabel(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string '_&lt;modalityLabel&gt;'\n\n        \"\"\"\n\n        return self._modalityLabel\n\n    @modalityLabel.setter\n\n    def modalityLabel(self, modalityLabel):\n\n        \"\"\" Prepend '_' if necessary\"\"\"\n\n        self._modalityLabel = self.prepend(modalityLabel)\n\n    @property\n\n    def customLabels(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string '_&lt;customLabels&gt;'\n\n        \"\"\"\n\n        return self._customLabels\n\n    @customLabels.setter\n\n    def customLabels(self, customLabels):\n\n        \"\"\" Prepend '_' if necessary\"\"\"\n\n        self._customLabels = self.prepend(customLabels)\n\n    @property\n\n    def suffix(self):\n\n        \"\"\" The suffix to build filenames\n\n        Returns:\n\n            A string '_&lt;modalityLabel&gt;' or '_&lt;customLabels&gt;_&lt;modalityLabel&gt;'\n\n        \"\"\"\n\n        if self.customLabels.strip() == \"\":\n\n            return self.modalityLabel\n\n        else:\n\n            return self.customLabels + self.modalityLabel\n\n    @property\n\n    def srcRoot(self):\n\n        \"\"\"\n\n        Return:\n\n            The sidecar source root to move\n\n        \"\"\"\n\n        if self.srcSidecar:\n\n            return self.srcSidecar.root\n\n        else:\n\n            return None\n\n    @property\n\n    def dstRoot(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination root inside the BIDS structure\n\n        \"\"\"\n\n        return opj(\n\n            self.participant.directory,\n\n            self.dataType,\n\n            self.dstFile,\n\n        )\n\n    @property\n\n    def dstIntendedFor(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination root inside the BIDS structure for intendedFor\n\n        \"\"\"\n\n        return opj(\n\n            self.participant.session,\n\n            self.dataType,\n\n            self.dstFile,\n\n        )\n\n    def setDstFile(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination filename formatted following the v1.7.0 BIDS entity key table\n\n            https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html\n\n        \"\"\"\n\n        current_name = self.participant.prefix + self.suffix\n\n        new_name = ''\n\n        current_dict = dict(x.split(\"-\") for x in current_name.split(\"_\") if len(x.split('-')) == 2)\n\n        suffix_list = [x for x in current_name.split(\"_\") if len(x.split('-')) == 1]\n\n        for current_key in DEFAULT.entityTableKeys:\n\n            if current_key in current_dict and new_name != '':\n\n                new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n            elif current_key in current_dict:\n\n                new_name = f\"{current_key}-{current_dict[current_key]}\"\n\n            current_dict.pop(current_key, None)\n\n        for current_key in current_dict:\n\n            new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n        if current_dict:\n\n            self.logger.warning(\"Entity \\\"{}\\\"\".format(list(current_dict.keys())) +\n\n                                \" is not a valid BIDS entity.\")\n\n        new_name += f\"_{'_'.join(suffix_list)}\"  # Allow multiple single keys (without value)\n\n        if len(suffix_list) != 1:\n\n            self.logger.warning(\"There was more than one suffix found \"\n\n                                f\"({suffix_list}). This is not BIDS \"\n\n                                \"compliant. Make sure you know what \"\n\n                                \"you are doing.\")\n\n        if current_name != new_name:\n\n            self.logger.warning(\n\n                f\"\"\"\u2705 Filename was reordered according to BIDS entity table order:\n\n                from:   {current_name}\n\n                to:     {new_name}\"\"\")\n\n        self.dstFile = new_name\n\n    @property\n\n    def intendedFor(self):\n\n        return self._intendedFor\n\n    @intendedFor.setter\n\n    def intendedFor(self, value):\n\n        if isinstance(value, list):\n\n            self._intendedFor = value\n\n        else:\n\n            self._intendedFor = [value]\n\n    @property\n\n    def indexSidecar(self):\n\n        \"\"\"\n\n        Returns:\n\n            A int '_&lt;indexSidecar&gt;'\n\n        \"\"\"\n\n        return self._indexSidecar\n\n    @indexSidecar.setter\n\n    def indexSidecar(self, value):\n\n        \"\"\"\n\n        Returns:\n\n            A int '_&lt;indexSidecar&gt;'\n\n        \"\"\"\n\n        self._indexSidecar = value\n\n    def dstSidecarData(self, descriptions, intendedForList):\n\n        \"\"\"\n\n        \"\"\"\n\n        data = self.srcSidecar.origData\n\n        data[\"Dcm2bidsVersion\"] = __version__\n\n        # intendedFor key\n\n        if self.intendedFor != [None]:\n\n            intendedValue = []\n\n            for index in self.intendedFor:\n\n                intendedValue = intendedValue + intendedForList[index]\n\n            if len(intendedValue) == 1:\n\n                data[\"IntendedFor\"] = intendedValue[0]\n\n            else:\n\n                data[\"IntendedFor\"] = intendedValue\n\n        # sidecarChanges\n\n        for key, value in iteritems(self.sidecarChanges):\n\n            data[key] = value\n\n        return data\n\n    @staticmethod\n\n    def prepend(value, char=\"_\"):\n\n        \"\"\" Prepend `char` to `value` if necessary\n\n        Args:\n\n            value (str)\n\n            char (str)\n\n        \"\"\"\n\n        if value.strip() == \"\":\n\n            return \"\"\n\n        elif value.startswith(char):\n\n            return value\n\n        else:\n\n            return char + value\n</code></pre>"},{"location":"dcm2bids/structure/#static-methods","title":"Static methods","text":""},{"location":"dcm2bids/structure/#prepend","title":"prepend","text":"<pre><code>def prepend(\n    value,\n    char='_'\n)\n</code></pre> <p>Prepend <code>char</code> to <code>value</code> if necessary</p> <p>Args:     value (str)     char (str)</p> View Source <pre><code>    @staticmethod\n\n    def prepend(value, char=\"_\"):\n\n        \"\"\" Prepend `char` to `value` if necessary\n\n        Args:\n\n            value (str)\n\n            char (str)\n\n        \"\"\"\n\n        if value.strip() == \"\":\n\n            return \"\"\n\n        elif value.startswith(char):\n\n            return value\n\n        else:\n\n            return char + value\n</code></pre>"},{"location":"dcm2bids/structure/#instance-variables","title":"Instance variables","text":"<pre><code>customLabels\n</code></pre> <pre><code>dstIntendedFor\n</code></pre> <p>Return:</p> <p>The destination root inside the BIDS structure for intendedFor</p> <pre><code>dstRoot\n</code></pre> <p>Return:</p> <p>The destination root inside the BIDS structure</p> <pre><code>indexSidecar\n</code></pre> <pre><code>intendedFor\n</code></pre> <pre><code>modalityLabel\n</code></pre> <pre><code>srcRoot\n</code></pre> <p>Return:</p> <p>The sidecar source root to move</p> <pre><code>suffix\n</code></pre> <p>The suffix to build filenames</p>"},{"location":"dcm2bids/structure/#methods","title":"Methods","text":""},{"location":"dcm2bids/structure/#dstsidecardata","title":"dstSidecarData","text":"<pre><code>def dstSidecarData(\n    self,\n    descriptions,\n    intendedForList\n)\n</code></pre> View Source <pre><code>    def dstSidecarData(self, descriptions, intendedForList):\n\n        \"\"\"\n\n        \"\"\"\n\n        data = self.srcSidecar.origData\n\n        data[\"Dcm2bidsVersion\"] = __version__\n\n        # intendedFor key\n\n        if self.intendedFor != [None]:\n\n            intendedValue = []\n\n            for index in self.intendedFor:\n\n                intendedValue = intendedValue + intendedForList[index]\n\n            if len(intendedValue) == 1:\n\n                data[\"IntendedFor\"] = intendedValue[0]\n\n            else:\n\n                data[\"IntendedFor\"] = intendedValue\n\n        # sidecarChanges\n\n        for key, value in iteritems(self.sidecarChanges):\n\n            data[key] = value\n\n        return data\n</code></pre>"},{"location":"dcm2bids/structure/#setdstfile","title":"setDstFile","text":"<pre><code>def setDstFile(\n    self\n)\n</code></pre> <p>Return:</p> <p>The destination filename formatted following the v1.7.0 BIDS entity key table https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html</p> View Source <pre><code>    def setDstFile(self):\n\n        \"\"\"\n\n        Return:\n\n            The destination filename formatted following the v1.7.0 BIDS entity key table\n\n            https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html\n\n        \"\"\"\n\n        current_name = self.participant.prefix + self.suffix\n\n        new_name = ''\n\n        current_dict = dict(x.split(\"-\") for x in current_name.split(\"_\") if len(x.split('-')) == 2)\n\n        suffix_list = [x for x in current_name.split(\"_\") if len(x.split('-')) == 1]\n\n        for current_key in DEFAULT.entityTableKeys:\n\n            if current_key in current_dict and new_name != '':\n\n                new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n            elif current_key in current_dict:\n\n                new_name = f\"{current_key}-{current_dict[current_key]}\"\n\n            current_dict.pop(current_key, None)\n\n        for current_key in current_dict:\n\n            new_name += f\"_{current_key}-{current_dict[current_key]}\"\n\n        if current_dict:\n\n            self.logger.warning(\"Entity \\\"{}\\\"\".format(list(current_dict.keys())) +\n\n                                \" is not a valid BIDS entity.\")\n\n        new_name += f\"_{'_'.join(suffix_list)}\"  # Allow multiple single keys (without value)\n\n        if len(suffix_list) != 1:\n\n            self.logger.warning(\"There was more than one suffix found \"\n\n                                f\"({suffix_list}). This is not BIDS \"\n\n                                \"compliant. Make sure you know what \"\n\n                                \"you are doing.\")\n\n        if current_name != new_name:\n\n            self.logger.warning(\n\n                f\"\"\"\u2705 Filename was reordered according to BIDS entity table order:\n\n                from:   {current_name}\n\n                to:     {new_name}\"\"\")\n\n        self.dstFile = new_name\n</code></pre>"},{"location":"dcm2bids/structure/#participant","title":"Participant","text":"<pre><code>class Participant(\n    name,\n    session=''\n)\n</code></pre> <p>Class representing a participant</p>"},{"location":"dcm2bids/structure/#attributes_1","title":"Attributes","text":"Name Type Description Default name str Label of your participant None session str Optional label of a session None View Source <pre><code>class Participant(object):\n\n    \"\"\" Class representing a participant\n\n    Args:\n\n        name (str): Label of your participant\n\n        session (str): Optional label of a session\n\n    \"\"\"\n\n    def __init__(self, name, session=DEFAULT.session):\n\n        self._name = \"\"\n\n        self._session = \"\"\n\n        self.name = name\n\n        self.session = session\n\n    @property\n\n    def name(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string 'sub-&lt;subject_label&gt;'\n\n        \"\"\"\n\n        return self._name\n\n    @name.setter\n\n    def name(self, name):\n\n        \"\"\" Prepend 'sub-' if necessary\"\"\"\n\n        if name.startswith(\"sub-\"):\n\n            self._name = name\n\n        else:\n\n            self._name = \"sub-\" + name\n\n    @property\n\n    def session(self):\n\n        \"\"\"\n\n        Returns:\n\n            A string 'ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        return self._session\n\n    @session.setter\n\n    def session(self, session):\n\n        \"\"\" Prepend 'ses-' if necessary\"\"\"\n\n        if session.strip() == \"\":\n\n            self._session = \"\"\n\n        elif session.startswith(\"ses-\"):\n\n            self._session = session\n\n        else:\n\n            self._session = \"ses-\" + session\n\n    @property\n\n    def directory(self):\n\n        \"\"\" The directory of the participant\n\n        Returns:\n\n            A path 'sub-&lt;subject_label&gt;' or\n\n            'sub-&lt;subject_label&gt;/ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        if self.hasSession():\n\n            return opj(self.name, self.session)\n\n        else:\n\n            return self.name\n\n    @property\n\n    def prefix(self):\n\n        \"\"\" The prefix to build filenames\n\n        Returns:\n\n            A string 'sub-&lt;subject_label&gt;' or\n\n            'sub-&lt;subject_label&gt;_ses-&lt;session_label&gt;'\n\n        \"\"\"\n\n        if self.hasSession():\n\n            return self.name + \"_\" + self.session\n\n        else:\n\n            return self.name\n\n    def hasSession(self):\n\n        \"\"\" Check if a session is set\n\n        Returns:\n\n            Boolean\n\n        \"\"\"\n\n        return self.session.strip() != DEFAULT.session\n</code></pre>"},{"location":"dcm2bids/structure/#instance-variables_1","title":"Instance variables","text":"<pre><code>directory\n</code></pre> <p>The directory of the participant</p> <pre><code>name\n</code></pre> <pre><code>prefix\n</code></pre> <p>The prefix to build filenames</p> <pre><code>session\n</code></pre>"},{"location":"dcm2bids/structure/#methods_1","title":"Methods","text":""},{"location":"dcm2bids/structure/#hassession","title":"hasSession","text":"<pre><code>def hasSession(\n    self\n)\n</code></pre> <p>Check if a session is set</p> <p>Returns:</p> Type Description None Boolean View Source <pre><code>    def hasSession(self):\n\n        \"\"\" Check if a session is set\n\n        Returns:\n\n            Boolean\n\n        \"\"\"\n\n        return self.session.strip() != DEFAULT.session\n</code></pre>"},{"location":"dcm2bids/utils/","title":"Module dcm2bids.utils","text":"View Source <pre><code># -*- coding: utf-8 -*-\n\nimport csv\n\nimport json\n\nimport logging\n\nimport os\n\nfrom pathlib import Path\n\nimport re\n\nfrom collections import OrderedDict\n\nimport shlex\n\nimport shutil\n\nfrom subprocess import check_output\n\nclass DEFAULT(object):\n\n    \"\"\" Default values of the package\"\"\"\n\n    # cli dcm2bids\n\n    cliLogLevel = \"INFO\"\n\n    EPILOG=\"Documentation at https://github.com/unfmontreal/Dcm2Bids\"\n\n    # dcm2bids.py\n\n    outputDir = Path.cwd()\n\n    session = \"\"  # also Participant object\n\n    clobber = False\n\n    forceDcm2niix = False\n\n    defaceTpl = None\n\n    logLevel = \"WARNING\"\n\n    # dcm2niix.py\n\n    dcm2niixOptions = \"-b y -ba y -z y -f '%3s_%f_%p_%t'\"\n\n    dcm2niixVersion = \"v1.0.20181125\"\n\n    # sidecar.py\n\n    compKeys = [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"]\n\n    searchMethod = \"fnmatch\"\n\n    searchMethodChoices = [\"fnmatch\", \"re\"]\n\n    runTpl = \"_run-{:02d}\"\n\n    caseSensitive = True\n\n    # Entity table:\n\n    # https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html\n\n    entityTableKeys = [\"sub\", \"ses\", \"task\", \"acq\", \"ce\", \"rec\", \"dir\",\n\n                       \"run\", \"mod\", \"echo\", \"flip\", \"inv\", \"mt\", \"part\",\n\n                       \"recording\"]\n\n    # misc\n\n    tmpDirName = \"tmp_dcm2bids\"\n\n    helperDir = \"helper\"\n\ndef load_json(filename):\n\n    \"\"\" Load a JSON file\n\n    Args:\n\n        filename (str): Path of a JSON file\n\n    Return:\n\n        Dictionnary of the JSON file\n\n    \"\"\"\n\n    with open(filename, \"r\") as f:\n\n        data = json.load(f, object_pairs_hook=OrderedDict)\n\n    return data\n\ndef save_json(filename, data):\n\n    with filename.open(\"w\") as f:\n\n        json.dump(data, f, indent=4)\n\ndef write_txt(filename, lines):\n\n    with open(filename, \"a\") as f:\n\n        for row in lines:\n\n            f.write(\"%s\\n\" % row)\n\ndef write_participants(filename, participants):\n\n    with open(filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, delimiter=\"\\t\", fieldnames=participants[0].keys())\n\n        writer.writeheader()\n\n        writer.writerows(participants)\n\ndef read_participants(filename):\n\n    if not os.path.exists(filename):\n\n        return []\n\n    with open(filename, \"r\") as f:\n\n        reader = csv.DictReader(f, delimiter=\"\\t\")\n\n        return [row for row in reader]\n\ndef splitext_(path, extensions=None):\n\n    \"\"\" Split the extension from a pathname\n\n    Handle case with extensions with '.' in it\n\n    Args:\n\n        path (str): A path to split\n\n        extensions (list): List of special extensions\n\n    Returns:\n\n        (root, ext): ext may be empty\n\n    \"\"\"\n\n    if extensions is None:\n\n        extensions = [\".nii.gz\"]\n\n    for ext in extensions:\n\n        if path.endswith(ext):\n\n            return path[: -len(ext)], path[-len(ext) :]\n\n    return os.path.splitext(path)\n\ndef run_shell_command(commandLine):\n\n    \"\"\" Wrapper of subprocess.check_output\n\n    Returns:\n\n        Run command with arguments and return its output\n\n    \"\"\"\n\n    logger = logging.getLogger(__name__)\n\n    logger.info(\"Running %s\", commandLine)\n\n    return check_output(commandLine)\n\ndef valid_path(in_path, type=\"folder\"):\n\n    \"\"\"Assert that file exists.\n\n    Parameters\n\n    ----------\n\n    required_file: Path\n\n        Path to be checked.\n\n    \"\"\"\n\n    if isinstance(in_path, str):\n\n        in_path = Path(in_path)\n\n    if type == 'folder':\n\n        if in_path.is_dir() or in_path.parent.is_dir():\n\n            return in_path\n\n        else:\n\n            raise NotADirectoryError(in_path)\n\n    elif type == \"file\":\n\n        if in_path.is_file():\n\n            return in_path\n\n        else:\n\n            raise FileNotFoundError(in_path)\n\n    raise TypeError(type)\n\ndef assert_dirs_empty(parser, args, required):\n\n    \"\"\"\n\n    Assert that all directories exist are empty.\n\n    If dirs exist and not empty, and --force is used, delete dirs.\n\n    Parameters\n\n    ----------\n\n    parser: argparse.ArgumentParser object\n\n        Parser.\n\n    args: argparse namespace\n\n        Argument list.\n\n    required: string or list of paths to files\n\n        Required paths to be checked.\n\n    create_dir: bool\n\n        If true, create the directory if it does not exist.\n\n    \"\"\"\n\n    def check(path):\n\n        if not path.is_dir():\n\n            return\n\n        if not any(path.iterdir()):\n\n            return\n\n        if not args.overwrite:\n\n            parser.error(\n\n                f\"Output directory {path} isn't empty, so some files \"\n\n                \"could be overwritten or deleted.\\nRerun the command with \"\n\n                \"--force option to overwrite existing output files.\")\n\n        else:\n\n            for the_file in path.iterdir():\n\n                file_path = path / the_file\n\n                try:\n\n                    if file_path.is_file():\n\n                        file_path.unlink()\n\n                    elif file_path.is_dir():\n\n                        shutil.rmtree(file_path)\n\n                except Exception as e:\n\n                    print(e)\n\n    if isinstance(required, str) or isinstance(required, Path):\n\n        required = [Path(required)]\n\n    for cur_dir in required:\n\n        check(cur_dir)\n</code></pre>"},{"location":"dcm2bids/utils/#functions","title":"Functions","text":""},{"location":"dcm2bids/utils/#assert_dirs_empty","title":"assert_dirs_empty","text":"<pre><code>def assert_dirs_empty(\n    parser,\n    args,\n    required\n)\n</code></pre> <p>Assert that all directories exist are empty.</p> <p>If dirs exist and not empty, and --force is used, delete dirs.</p> <p>Parameters:</p> Name Type Description Default parser argparse.ArgumentParser object Parser. None args argparse namespace Argument list. None required string or list of paths to files Required paths to be checked. None create_dir bool If true, create the directory if it does not exist. None View Source <pre><code>def assert_dirs_empty(parser, args, required):\n\n    \"\"\"\n\n    Assert that all directories exist are empty.\n\n    If dirs exist and not empty, and --force is used, delete dirs.\n\n    Parameters\n\n    ----------\n\n    parser: argparse.ArgumentParser object\n\n        Parser.\n\n    args: argparse namespace\n\n        Argument list.\n\n    required: string or list of paths to files\n\n        Required paths to be checked.\n\n    create_dir: bool\n\n        If true, create the directory if it does not exist.\n\n    \"\"\"\n\n    def check(path):\n\n        if not path.is_dir():\n\n            return\n\n        if not any(path.iterdir()):\n\n            return\n\n        if not args.overwrite:\n\n            parser.error(\n\n                f\"Output directory {path} isn't empty, so some files \"\n\n                \"could be overwritten or deleted.\\nRerun the command with \"\n\n                \"--force option to overwrite existing output files.\")\n\n        else:\n\n            for the_file in path.iterdir():\n\n                file_path = path / the_file\n\n                try:\n\n                    if file_path.is_file():\n\n                        file_path.unlink()\n\n                    elif file_path.is_dir():\n\n                        shutil.rmtree(file_path)\n\n                except Exception as e:\n\n                    print(e)\n\n    if isinstance(required, str) or isinstance(required, Path):\n\n        required = [Path(required)]\n\n    for cur_dir in required:\n\n        check(cur_dir)\n</code></pre>"},{"location":"dcm2bids/utils/#load_json","title":"load_json","text":"<pre><code>def load_json(\n    filename\n)\n</code></pre> <p>Load a JSON file</p> <p>Parameters:</p> Name Type Description Default filename str Path of a JSON file None View Source <pre><code>def load_json(filename):\n\n    \"\"\" Load a JSON file\n\n    Args:\n\n        filename (str): Path of a JSON file\n\n    Return:\n\n        Dictionnary of the JSON file\n\n    \"\"\"\n\n    with open(filename, \"r\") as f:\n\n        data = json.load(f, object_pairs_hook=OrderedDict)\n\n    return data\n</code></pre>"},{"location":"dcm2bids/utils/#read_participants","title":"read_participants","text":"<pre><code>def read_participants(\n    filename\n)\n</code></pre> View Source <pre><code>def read_participants(filename):\n\n    if not os.path.exists(filename):\n\n        return []\n\n    with open(filename, \"r\") as f:\n\n        reader = csv.DictReader(f, delimiter=\"\\t\")\n\n        return [row for row in reader]\n</code></pre>"},{"location":"dcm2bids/utils/#run_shell_command","title":"run_shell_command","text":"<pre><code>def run_shell_command(\n    commandLine\n)\n</code></pre> <p>Wrapper of subprocess.check_output</p> <p>Returns:</p> Type Description None Run command with arguments and return its output View Source <pre><code>def run_shell_command(commandLine):\n\n    \"\"\" Wrapper of subprocess.check_output\n\n    Returns:\n\n        Run command with arguments and return its output\n\n    \"\"\"\n\n    logger = logging.getLogger(__name__)\n\n    logger.info(\"Running %s\", commandLine)\n\n    return check_output(commandLine)\n</code></pre>"},{"location":"dcm2bids/utils/#save_json","title":"save_json","text":"<pre><code>def save_json(\n    filename,\n    data\n)\n</code></pre> View Source <pre><code>def save_json(filename, data):\n\n    with filename.open(\"w\") as f:\n\n        json.dump(data, f, indent=4)\n</code></pre>"},{"location":"dcm2bids/utils/#splitext_","title":"splitext_","text":"<pre><code>def splitext_(\n    path,\n    extensions=None\n)\n</code></pre> <p>Split the extension from a pathname</p> <p>Handle case with extensions with '.' in it</p> <p>Parameters:</p> Name Type Description Default path str A path to split None extensions list List of special extensions None <p>Returns:</p> Type Description None (root, ext): ext may be empty View Source <pre><code>def splitext_(path, extensions=None):\n\n    \"\"\" Split the extension from a pathname\n\n    Handle case with extensions with '.' in it\n\n    Args:\n\n        path (str): A path to split\n\n        extensions (list): List of special extensions\n\n    Returns:\n\n        (root, ext): ext may be empty\n\n    \"\"\"\n\n    if extensions is None:\n\n        extensions = [\".nii.gz\"]\n\n    for ext in extensions:\n\n        if path.endswith(ext):\n\n            return path[: -len(ext)], path[-len(ext) :]\n\n    return os.path.splitext(path)\n</code></pre>"},{"location":"dcm2bids/utils/#valid_path","title":"valid_path","text":"<pre><code>def valid_path(\n    in_path,\n    type='folder'\n)\n</code></pre> <p>Assert that file exists.</p> <p>Parameters:</p> Name Type Description Default required_file Path Path to be checked. None View Source <pre><code>def valid_path(in_path, type=\"folder\"):\n\n    \"\"\"Assert that file exists.\n\n    Parameters\n\n    ----------\n\n    required_file: Path\n\n        Path to be checked.\n\n    \"\"\"\n\n    if isinstance(in_path, str):\n\n        in_path = Path(in_path)\n\n    if type == 'folder':\n\n        if in_path.is_dir() or in_path.parent.is_dir():\n\n            return in_path\n\n        else:\n\n            raise NotADirectoryError(in_path)\n\n    elif type == \"file\":\n\n        if in_path.is_file():\n\n            return in_path\n\n        else:\n\n            raise FileNotFoundError(in_path)\n\n    raise TypeError(type)\n</code></pre>"},{"location":"dcm2bids/utils/#write_participants","title":"write_participants","text":"<pre><code>def write_participants(\n    filename,\n    participants\n)\n</code></pre> View Source <pre><code>def write_participants(filename, participants):\n\n    with open(filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, delimiter=\"\\t\", fieldnames=participants[0].keys())\n\n        writer.writeheader()\n\n        writer.writerows(participants)\n</code></pre>"},{"location":"dcm2bids/utils/#write_txt","title":"write_txt","text":"<pre><code>def write_txt(\n    filename,\n    lines\n)\n</code></pre> View Source <pre><code>def write_txt(filename, lines):\n\n    with open(filename, \"a\") as f:\n\n        for row in lines:\n\n            f.write(\"%s\\n\" % row)\n</code></pre>"},{"location":"dcm2bids/utils/#classes","title":"Classes","text":""},{"location":"dcm2bids/utils/#default","title":"DEFAULT","text":"<pre><code>class DEFAULT(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Default values of the package</p> View Source <pre><code>class DEFAULT(object):\n\n    \"\"\" Default values of the package\"\"\"\n\n    # cli dcm2bids\n\n    cliLogLevel = \"INFO\"\n\n    EPILOG=\"Documentation at https://github.com/unfmontreal/Dcm2Bids\"\n\n    # dcm2bids.py\n\n    outputDir = Path.cwd()\n\n    session = \"\"  # also Participant object\n\n    clobber = False\n\n    forceDcm2niix = False\n\n    defaceTpl = None\n\n    logLevel = \"WARNING\"\n\n    # dcm2niix.py\n\n    dcm2niixOptions = \"-b y -ba y -z y -f '%3s_%f_%p_%t'\"\n\n    dcm2niixVersion = \"v1.0.20181125\"\n\n    # sidecar.py\n\n    compKeys = [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"]\n\n    searchMethod = \"fnmatch\"\n\n    searchMethodChoices = [\"fnmatch\", \"re\"]\n\n    runTpl = \"_run-{:02d}\"\n\n    caseSensitive = True\n\n    # Entity table:\n\n    # https://bids-specification.readthedocs.io/en/v1.7.0/99-appendices/04-entity-table.html\n\n    entityTableKeys = [\"sub\", \"ses\", \"task\", \"acq\", \"ce\", \"rec\", \"dir\",\n\n                       \"run\", \"mod\", \"echo\", \"flip\", \"inv\", \"mt\", \"part\",\n\n                       \"recording\"]\n\n    # misc\n\n    tmpDirName = \"tmp_dcm2bids\"\n\n    helperDir = \"helper\"\n</code></pre>"},{"location":"dcm2bids/utils/#class-variables","title":"Class variables","text":"<pre><code>EPILOG\n</code></pre> <pre><code>caseSensitive\n</code></pre> <pre><code>cliLogLevel\n</code></pre> <pre><code>clobber\n</code></pre> <pre><code>compKeys\n</code></pre> <pre><code>dcm2niixOptions\n</code></pre> <pre><code>dcm2niixVersion\n</code></pre> <pre><code>defaceTpl\n</code></pre> <pre><code>entityTableKeys\n</code></pre> <pre><code>forceDcm2niix\n</code></pre> <pre><code>helperDir\n</code></pre> <pre><code>logLevel\n</code></pre> <pre><code>outputDir\n</code></pre> <pre><code>runTpl\n</code></pre> <pre><code>searchMethod\n</code></pre> <pre><code>searchMethodChoices\n</code></pre> <pre><code>session\n</code></pre> <pre><code>tmpDirName\n</code></pre>"},{"location":"dcm2bids/version/","title":"Module dcm2bids.version","text":"<p>This module take care of the versioning</p> View Source <pre><code># -*- coding: utf-8 -*-\n\n\"\"\"This module take care of the versioning\"\"\"\n\n# dcm2bids version\n\n__version__ = \"2.1.7\"\n\nimport logging\n\nimport shlex\n\nfrom distutils.version import LooseVersion\n\nfrom subprocess import check_output, CalledProcessError, TimeoutExpired\n\nfrom shutil import which\n\nlogger = logging.getLogger(__name__)\n\ndef is_tool(name):\n\n    \"\"\" Check if a program is in PATH\n\n    Args:\n\n        name (string): program name\n\n    Returns:\n\n        boolean\n\n    \"\"\"\n\n    return which(name) is not None\n\ndef check_github_latest(githubRepo, timeout=3):\n\n    \"\"\" Check the latest version of a github repository\n\n    Args:\n\n        githubRepo (string): a github repository (\"username/repository\")\n\n        timeout (int): time in seconds\n\n    Returns:\n\n        A string of the version\n\n    \"\"\"\n\n    url = \"https://github.com/{}/releases/latest\".format(githubRepo)\n\n    try:\n\n        output = check_output(shlex.split(\"curl -L --silent \" + url), timeout=timeout)\n\n    except CalledProcessError:\n\n        logger.info(f\"Checking latest version of {githubRepo} was not possible\")\n\n        logger.debug(f\"Error while 'curl --silent {url}'\", exc_info=True)\n\n        return\n\n    except TimeoutExpired:\n\n        logger.info(f\"Checking latest version of {githubRepo} was not possible\")\n\n        logger.debug(f\"Command 'curl --silent {url}' timed out after {timeout}s\")\n\n        return\n\n    # The output should have this format\n\n    # &lt;html&gt;&lt;body&gt;You are being &lt;a href=\"https://github.com/{gitRepo}/releases/tag/{version}\"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;\n\n    try:\n\n        version = output.decode().split(\"{}/releases/tag/\".format(githubRepo))[1].split('\"')[0]\n\n        # Versions are X.X.X\n\n        if len(version) &gt; 5:\n\n            version = version[:5]\n\n        return version\n\n    except:\n\n        logger.debug(\n\n            \"Checking latest version of %s was not possible\", githubRepo,\n\n            exc_info=True,\n\n        )\n\n        return\n\ndef check_latest(name=\"dcm2bids\"):\n\n    \"\"\" Check if a new version of a software exists and print some details\n\n    Implemented for dcm2bids, dcm2niix\n\n    Args:\n\n        name (string): name of the software\n\n    Returns:\n\n        None\n\n    \"\"\"\n\n    data = {\n\n        \"dcm2bids\": {\n\n            \"repo\": \"unfmontreal/Dcm2Bids\",\n\n            \"host\": \"https://github.com\",\n\n            \"current\": __version__,\n\n        },\n\n        \"dcm2niix\": {\n\n            \"repo\": \"rordenlab/dcm2niix\",\n\n            \"host\": \"https://github.com\",\n\n            \"current\": dcm2niix_version,\n\n        },\n\n    }\n\n    if is_tool(\"curl\"):\n\n        host = data.get(name)[\"host\"]\n\n        if host == \"https://github.com\":\n\n            repo = data.get(name)[\"repo\"]\n\n            latest = check_github_latest(repo)\n\n        else:\n\n            # Not implemented\n\n            return\n\n    else:\n\n        logger.debug(\"Checking latest version of %s was not possible\", name)\n\n        logger.debug(\"curl: %s\", is_tool(\"curl\"))\n\n        return\n\n    current = data.get(name)[\"current\"]\n\n    if callable(current):\n\n        current = current()\n\n    try:\n\n        news = LooseVersion(latest) &gt; LooseVersion(current)\n\n    except:\n\n        news = None\n\n    if news:\n\n        logger.warning(\"Your using %s version %s\", name, current)\n\n        logger.warning(\"A new version exists : %s\", latest)\n\n        logger.warning(\"Check %s/%s\", host, repo)\n\ndef dcm2niix_version():\n\n    \"\"\"\n\n    Returns:\n\n        A string of the version of dcm2niix install on the system\n\n    \"\"\"\n\n    if not is_tool(\"dcm2niix\"):\n\n        logger.error(\"dcm2niix is not in your PATH or not installed\")\n\n        logger.error(\"Check https://github.com/rordenlab/dcm2niix\")\n\n        return\n\n    try:\n\n        output = check_output(shlex.split(\"dcm2niix\"))\n\n    except:\n\n        logger.error(\"Running: dcm2niix\", exc_info=True)\n\n        return\n\n    try:\n\n        lines = output.decode().split(\"\\n\")\n\n    except:\n\n        logger.debug(output, exc_info=True)\n\n        return\n\n    for line in lines:\n\n        try:\n\n            splits = line.split()\n\n            return splits[splits.index(\"version\") + 1]\n\n        except:\n\n            continue\n\n    return\n</code></pre>"},{"location":"dcm2bids/version/#variables","title":"Variables","text":"<pre><code>logger\n</code></pre>"},{"location":"dcm2bids/version/#functions","title":"Functions","text":""},{"location":"dcm2bids/version/#check_github_latest","title":"check_github_latest","text":"<pre><code>def check_github_latest(\n    githubRepo,\n    timeout=3\n)\n</code></pre> <p>Check the latest version of a github repository</p> <p>Parameters:</p> Name Type Description Default githubRepo string a github repository (\"username/repository\") None timeout int time in seconds None <p>Returns:</p> Type Description None A string of the version View Source <pre><code>def check_github_latest(githubRepo, timeout=3):\n\n    \"\"\" Check the latest version of a github repository\n\n    Args:\n\n        githubRepo (string): a github repository (\"username/repository\")\n\n        timeout (int): time in seconds\n\n    Returns:\n\n        A string of the version\n\n    \"\"\"\n\n    url = \"https://github.com/{}/releases/latest\".format(githubRepo)\n\n    try:\n\n        output = check_output(shlex.split(\"curl -L --silent \" + url), timeout=timeout)\n\n    except CalledProcessError:\n\n        logger.info(f\"Checking latest version of {githubRepo} was not possible\")\n\n        logger.debug(f\"Error while 'curl --silent {url}'\", exc_info=True)\n\n        return\n\n    except TimeoutExpired:\n\n        logger.info(f\"Checking latest version of {githubRepo} was not possible\")\n\n        logger.debug(f\"Command 'curl --silent {url}' timed out after {timeout}s\")\n\n        return\n\n    # The output should have this format\n\n    # &lt;html&gt;&lt;body&gt;You are being &lt;a href=\"https://github.com/{gitRepo}/releases/tag/{version}\"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;\n\n    try:\n\n        version = output.decode().split(\"{}/releases/tag/\".format(githubRepo))[1].split('\"')[0]\n\n        # Versions are X.X.X\n\n        if len(version) &gt; 5:\n\n            version = version[:5]\n\n        return version\n\n    except:\n\n        logger.debug(\n\n            \"Checking latest version of %s was not possible\", githubRepo,\n\n            exc_info=True,\n\n        )\n\n        return\n</code></pre>"},{"location":"dcm2bids/version/#check_latest","title":"check_latest","text":"<pre><code>def check_latest(\n    name='dcm2bids'\n)\n</code></pre> <p>Check if a new version of a software exists and print some details</p> <p>Implemented for dcm2bids, dcm2niix</p> <p>Parameters:</p> Name Type Description Default name string name of the software None <p>Returns:</p> Type Description None None View Source <pre><code>def check_latest(name=\"dcm2bids\"):\n\n    \"\"\" Check if a new version of a software exists and print some details\n\n    Implemented for dcm2bids, dcm2niix\n\n    Args:\n\n        name (string): name of the software\n\n    Returns:\n\n        None\n\n    \"\"\"\n\n    data = {\n\n        \"dcm2bids\": {\n\n            \"repo\": \"unfmontreal/Dcm2Bids\",\n\n            \"host\": \"https://github.com\",\n\n            \"current\": __version__,\n\n        },\n\n        \"dcm2niix\": {\n\n            \"repo\": \"rordenlab/dcm2niix\",\n\n            \"host\": \"https://github.com\",\n\n            \"current\": dcm2niix_version,\n\n        },\n\n    }\n\n    if is_tool(\"curl\"):\n\n        host = data.get(name)[\"host\"]\n\n        if host == \"https://github.com\":\n\n            repo = data.get(name)[\"repo\"]\n\n            latest = check_github_latest(repo)\n\n        else:\n\n            # Not implemented\n\n            return\n\n    else:\n\n        logger.debug(\"Checking latest version of %s was not possible\", name)\n\n        logger.debug(\"curl: %s\", is_tool(\"curl\"))\n\n        return\n\n    current = data.get(name)[\"current\"]\n\n    if callable(current):\n\n        current = current()\n\n    try:\n\n        news = LooseVersion(latest) &gt; LooseVersion(current)\n\n    except:\n\n        news = None\n\n    if news:\n\n        logger.warning(\"Your using %s version %s\", name, current)\n\n        logger.warning(\"A new version exists : %s\", latest)\n\n        logger.warning(\"Check %s/%s\", host, repo)\n</code></pre>"},{"location":"dcm2bids/version/#dcm2niix_version","title":"dcm2niix_version","text":"<pre><code>def dcm2niix_version(\n\n)\n</code></pre> <p>Returns:</p> Type Description None View Source <pre><code>def dcm2niix_version():\n\n    \"\"\"\n\n    Returns:\n\n        A string of the version of dcm2niix install on the system\n\n    \"\"\"\n\n    if not is_tool(\"dcm2niix\"):\n\n        logger.error(\"dcm2niix is not in your PATH or not installed\")\n\n        logger.error(\"Check https://github.com/rordenlab/dcm2niix\")\n\n        return\n\n    try:\n\n        output = check_output(shlex.split(\"dcm2niix\"))\n\n    except:\n\n        logger.error(\"Running: dcm2niix\", exc_info=True)\n\n        return\n\n    try:\n\n        lines = output.decode().split(\"\\n\")\n\n    except:\n\n        logger.debug(output, exc_info=True)\n\n        return\n\n    for line in lines:\n\n        try:\n\n            splits = line.split()\n\n            return splits[splits.index(\"version\") + 1]\n\n        except:\n\n            continue\n\n    return\n</code></pre>"},{"location":"dcm2bids/version/#is_tool","title":"is_tool","text":"<pre><code>def is_tool(\n    name\n)\n</code></pre> <p>Check if a program is in PATH</p> <p>Parameters:</p> Name Type Description Default name string program name None <p>Returns:</p> Type Description None boolean View Source <pre><code>def is_tool(name):\n\n    \"\"\" Check if a program is in PATH\n\n    Args:\n\n        name (string): program name\n\n    Returns:\n\n        boolean\n\n    \"\"\"\n\n    return which(name) is not None\n</code></pre>"},{"location":"get-started/","title":"Getting started with dcm2bids","text":""},{"location":"get-started/#how-to-get-the-most-out-of-the-documentation","title":"How to get the most out of the documentation","text":"<p>Our documentation is organized in 4 main parts and each fulfills a different function:</p> <ol> <li>Installation: A beginner-friendly guide that walks     through the installation process, including the creation of a dedicated     environment.     <ul> <li>TL;DR: Run <code>conda install -c conda-forge dcm2bids</code> or <code>pip install dcm2bids</code> within your project environment. </li> </ul> </li> <li>Tutorials: Aimed at beginners and people new to dcm2bids,     the tutorials are a series of steps that describes in length how to use     dcm2bids in order to understand how dcm2bids works.</li> <li>How-to guides: Analogous to recipes, these guides provides     series of steps to address typical problems and use-cases when converting     into BIDS. They are less verbose than tutorials and assume some     understanding of BIDS-related concepts and how dcm2bids works.     <ul> <li>There is an exception worth reading by anyone: How-to Get help and support </li> </ul> </li> <li>Technical reference: Automated rendering of the code that     composes the inner machinery of dcm2bids.</li> </ol>"},{"location":"get-started/install/","title":"Installation","text":"<p>Before you can use dcm2bids, you will need to get it installed. This page guides you through a minimal, typical dcm2bids installation workflow that is sufficient to complete all dcm2bids tasks.</p> <p>We recommend to skim-read the full page before you start installing anything considering there are many ways to install software in the Python ecosystem which are often dependent on the familiarity and preference of the user.</p> <p>We offer recommendations at the bottom of the page that will take care of the whole installation process in one go and make use of a dedicated environment for dcm2bids.</p> You just want the installation command? <p>If you are used to installing packages, you can get it from PyPI or conda:</p> <p><code>pip install dcm2bids</code></p> <p><code>conda install -c conda-forge dcm2bids</code></p>"},{"location":"get-started/install/#dependencies","title":"Dependencies","text":""},{"location":"get-started/install/#python","title":"Python","text":"<p>As dcm2bids is a Python package, the first prerequisite is that Python must be installed on the machine you will use dcm2bids. You will need Python 3.7 or above to run dcm2bids properly.</p> <p>If you are unsure what version(s) of Python is available on your machine, you can find out by opening a terminal and typing <code>python --version</code> or <code>python</code>. The former will output the version directly in the terminal while the latter will open an interactive Python shell with the version displayed in the first line.</p> python --versionpython <pre><code>sam:~$ python --version\nPython 3.10.4\n</code></pre> <pre><code>sam:~$ python\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:39:04) [GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n</code></pre> <p>If your system-wide version of Python is lower 3.7, it is okay. We will make sure to use a higher version in the isolated environment that will be created for dcm2bids. The important part is to verify that Python is installed.</p> <p>If you are a beginning user in the Python ecosystem, the odds are that you have installed Anaconda, which contains all Python versions so you should be good. If you were not able to find out which version of Python is installed on your machine or find Anaconda on your machine, we recommend that you install Python through Anaconda.</p> Should I install Anaconda or Miniconda? <p>If you unsure what to install read this section describing the differences between Anaconda and Miniconda to help you choose.</p>"},{"location":"get-started/install/#dcm2niix","title":"dcm2niix","text":"<p>dcm2niix can also be installed in a variety of ways as seen on the main page of the software.</p> <p>Whether you want to install the latest compiled executable directly on your machine is up to you but you have to make sure you can call the software from any directory. In other words, you have to make sure it is included in your <code>$PATH</code>. Otherwise, dcm2bids won't be able to run dcm2niix for you. That's why we recommend to install it at the same time in the dedicated environment.</p> <p>As you can see, dcm2niix is available through conda so that is the approach chosen in this guide. We will benefit from the simplicity of installing all software from the same located at. Steps to install dcm2niix are included in the next secton.</p>"},{"location":"get-started/install/#recommendations","title":"Recommendations","text":"<p>We recommend to install all the dependencies at once when installing dcm2bids on a machine or server. As mentioned above the minimal installation requires only dcm2bids, dcm2niix and Python &gt;= 3.7. For ease of use and to make sure we have a reproducible environment, we recommend to use a dedicated environment through conda or, for those who have it installed, Anaconda. Note that you don't need to use specifically them to use dcm2bids, but it will make your life easier.</p> More info on conda <p>Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. The conda package and environment manager is included in all versions of Anaconda and Miniconda. - conda docs</p> But I use another package/env management system, what do I do? <p>Of course you can use your preferred package/env management system, whether it is venv, virtualenv, pyenv, pip, poetry, etc. This guide was built on the basis that no previous knowledge is required to install and learn dcm2bids by so providing a simple way to install dcm2bids without having to worry about the rest.</p> I already created an environment for my project, what do I do? <p>You can update your environment either by:</p> <ol> <li>installing dcm2bids while your environment is active like any package; or</li> <li>adding dcm2bids to the dependencies and updating your environment</li> </ol> <p>Here's an example with conda after updating an <code>environment.yml</code> file:</p> <pre><code>conda env update --file environment.yml --prune\n</code></pre>"},{"location":"get-started/install/#install-dcm2bids","title":"Install dcm2bids","text":"<p>From now on, it is assumed that conda (or Anaconda) is installed and correctly setup on your computer as it is the easiest way to install dcm2bids and its dependencies on any OS. We assume that if you want to install it in a different way, you have enough skills to do it on your own.</p> <p>If you installed Anaconda and want to use the graphical user interface (GUI), you can follow the steps as demonstrated below and only read the steps until the end of the installation guide.</p> Create your environment with the Anaconda Navigator GUI <ol> <li>Open Anaconda Navigator</li> <li>Click on Environments, then the + button at the bottom     </li> <li>Enter the name of the environment, it can be anything. You can call it dcm2bids then select Python </li> <li>Click on the new dcm2bids environment, then on Channels</li> <li>If you only see defaults, click on Add... then enter conda-forge then click on Update channels </li> <li>You now need to add the two main software, so you need to search for them in the top right corner. You should see them appear as soon as you right dcm2. You can select both at the same time.<ul> <li>If you don't seem them, you probabble need to select All channels instead of Installed. </li> </ul> </li> <li>It will ask you to install a bunch of packages, Apply.     </li> <li>You environment should now be ready, click on the green circle with the white arrow to start the environment. A terminal window should open. </li> <li>You should see the name of your environment (dcm2bids) to the left. You can now test that dcm2bids works. </li> </ol> <p>We could install all the software one by one using a series of command:</p> <pre><code>conda install -c conda-forge dcm2bids\nconda install -c conda-forge dcm2niix\n</code></pre> <p>But this would install the software in the main environment instead of a dedicated one, assuming none were active. This could have atrocious dependencies issues in the long-term if you want to install other software.</p>"},{"location":"get-started/install/#create-environmentyml","title":"Create environment.yml","text":"<p>That is exactly why dedicated environments were invented. To help creating dedicated environments, we can create a file, often called <code>environment.yml</code>, which is used to specify things such as the dependencies that need to be installed inside the environment.</p> <p>To create such a file, you can use any code editor or your terminal to write or paste the information below, and save it in your project directory with the name <code>environment.yml</code>:</p> <p>You can create a project directory anywhere on your computer, it does not matter. You can create <code>dcm2bids-proj</code> if you need inspiration.</p> <pre><code>name: dcm2bids\nchannels:\n- conda-forge\ndependencies:\n- python&gt;=3.7\n- dcm2niix\n- dcm2bids\n</code></pre> <p>In short, here's what the fields mean:</p> <ul> <li>The <code>name:</code> key refers to the name of the dedicated environment. You will have   to use this name to activate your environment and use software installed   inside. The name is arbitrary, you can name it however you want.</li> <li>The <code>channels:</code> key tells conda where to look for the declared dependencies.   In our case, all our dependencies are located on the conda-forge   channel.</li> <li>The <code>dependencies:</code> key lists all the dependencies to be installed inside the   environment. If you are creating an environment for your analysis project,   this is where you would list other dependencies such as <code>nilearn</code>, <code>pandas</code>,   and especially as <code>pip</code> since you don't want to use the pip outside of your   environment Note that we specify <code>python&gt;=3.7</code> to make sure the requirement is   satisfied for dcm2bids as the newer version of dcm2bids may face issue with   Python 3.6 and below.</li> </ul> <p>Now that all the dependencies have been specified, it is time to create the new conda environment dedicated to dcm2bids! </p>"},{"location":"get-started/install/#create-conda-environment-install-dcm2bids","title":"Create conda environment + install dcm2bids","text":"<p>Open a terminal and go in the directory where you put the <code>environment.yml</code> run this command:</p> <pre><code>conda env create --file environment.yml\n</code></pre> <p>If the executation was successful, you should see a message similar to:</p> <pre><code>sam:~/dcm2bids-proj$ nano environment.yml\nsam:~/dcm2bids-proj$ conda env create --file environment.yml\nCollecting package metadata (repodata.json): done\nSolving environment: |done\n\nDownloading and Extracting Packages\nfuture-0.18.2        | 738 KB    | ########################################## | 100%\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate dcm2bids\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n</code></pre>"},{"location":"get-started/install/#activate-environment","title":"Activate environment","text":"<p>Last step is to make sure you can activate1 your environment by running the command:</p> <pre><code>conda activate dcm2bids\n</code></pre> <p> Remember that dcm2bids here refer to the name given specified in the <code>environment.yml</code>.</p> <pre><code>sam:~/dcm2bids-proj$ conda activate dcm2bids\n(dcm2bids) sam:~/dcm2bids-proj$\n</code></pre> <p>You can see the environment is activated as a new <code>(dcm2bids)</code> appear in front of the username.</p>"},{"location":"get-started/install/#verify-that-dcm2bids-works","title":"Verify that dcm2bids works","text":"<p>Finally, you can test that dcm2bids was installed correctly by running the any dcm2bids command such as <code>dcm2bids --help</code>:</p> <pre><code>(dcm2bids) sam:~/dcm2bids-proj$ dcm2bids --help\nusage: dcm2bids [-h] -d DICOM_DIR [DICOM_DIR ...] -p PARTICIPANT [-s SESSION] -c\n                CONFIG [-o OUTPUT_DIR] [--forceDcm2niix] [--clobber]\n[-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [-a]\n\nReorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure\ndcm2bids 2.1.7\n\noptions:\n  -h, --help            show this help message and exit\n-d DICOM_DIR [DICOM_DIR ...], --dicom_dir DICOM_DIR [DICOM_DIR ...]\nDICOM directory(ies)\n-p PARTICIPANT, --participant PARTICIPANT\n                        Participant ID\n  -s SESSION, --session SESSION\n                        Session ID\n  -c CONFIG, --config CONFIG\n                        JSON configuration file (see example/config.json)\n-o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        Output BIDS directory, Default: current directory\n                        (/home/sam/dcm2bids-proj)\n--forceDcm2niix       Overwrite previous temporary dcm2niix output if it exists\n  --clobber             Overwrite output if it exists\n  -l {DEBUG,INFO,WARNING,ERROR,CRITICAL}, --log_level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\nSet logging level\n  -a, --anonymizer      This option no longer exists from the script in this\n                        release. See:https://github.com/unfmontreal/Dcm2Bids/blob/m\n                        aster/README.md#defaceTpl\n\n            Documentation at https://github.com/unfmontreal/Dcm2Bids\n</code></pre> <p>Voil\u00e0, you are ready to use dcm2bids or at least move onto the tutorial!!</p> <p>Go to the Tutorial section</p> <p>Go to the How-to section</p>"},{"location":"get-started/install/#containers","title":"Containers","text":"<p>We also provide a container image that includes both dcm2niix and dcm2bids which you can install using Docker or Apptainer/Singularity.</p> DockerApptainer/Singularity <p><code>docker pull unfmontreal/dcm2bids:latest</code></p> <p><code>singularity pull dcm2bids_latest.sif docker://unfmontreal/dcm2bids:latest</code></p>"},{"location":"get-started/install/#summary-of-the-steps","title":"Summary of the steps","text":"<p>In sum, installing dcm2bids is quite easy if you know how to install Python packages. The easiest way to install it is to follow the steps below using conda but it is also possible to use other software, including containers:</p> <ul> <li> <p> Create an <code>environment.yml</code> file with       dependencies</p> <ul> <li> Content:<pre><code>name: dcm2bids\nchannels:\n    - conda-forge\ndependencies:\n    - python&gt;=3.7\n    - dcm2niix\n    - dcm2bids\n</code></pre> </li> </ul> </li> <li> <p> Create conda environment</p> <ul> <li> <code>conda env create --file environment.yml</code></li> </ul> </li> <li> Activate conda environment<ul> <li> <code>conda activate dcm2bids</code></li> </ul> </li> <li> Verify a dcm2bids command<ul> <li> <code>dcm2bids --help</code></li> </ul> </li> <li> Consult how-to guides or follow the tutorial</li> </ul> <ol> <li> <p>To get out of a conda environment, you have to deactivate it with the <code>conda deactivate</code> command.\u00a0\u21a9</p> </li> </ol>"},{"location":"how-to/","title":"How-to guides","text":""},{"location":"how-to/#help","title":"Help","text":"<ul> <li>Get help and support</li> </ul>"},{"location":"how-to/#usage","title":"Usage","text":"<ul> <li> <p>Use main commands</p> </li> <li> <p>Create a config file</p> </li> <li> <p>Use advanced commands</p> </li> </ul>"},{"location":"how-to/#development-and-community","title":"Development and Community","text":"<ul> <li>Contribute to dcm2bids</li> </ul>"},{"location":"how-to/create-config-file/","title":"How to create a configuration file","text":""},{"location":"how-to/create-config-file/#configuration-file-example","title":"Configuration file example","text":"<pre><code>{\n\"descriptions\": [\n{\n\"dataType\": \"anat\",\n\"modalityLabel\": \"T2w\",\n\"criteria\": {\n\"SeriesDescription\": \"*T2*\",\n\"EchoTime\": 0.1\n},\n\"sidecarChanges\": {\n\"ProtocolName\": \"T2\"\n}\n},\n{\n\"dataType\": \"func\",\n\"modalityLabel\": \"bold\",\n\"customLabels\": \"task-rest\",\n\"criteria\": {\n\"ProtocolName\": \"func_task-*\",\n\"ImageType\": [\"ORIG*\", \"PRIMARY\", \"M\", \"MB\", \"ND\", \"MOSAIC\"]\n}\n},\n{\n\"dataType\": \"fmap\",\n\"modalityLabel\": \"fmap\",\n\"intendedFor\": 1,\n\"criteria\": {\n\"ProtocolName\": \"*field_mapping*\"\n}\n},\n{\n\"dataType\": \"func\",\n\"modalityLabel\": \"bold\",\n\"customLabels\": \"task-learning\",\n\"criteria\": {\n\"SeriesDescription\": \"bold_task-learning\"\n},\n\"sidecarChanges\": {\n\"TaskName\": \"learning\"\n}\n},\n{\n\"dataType\": \"fmap\",\n\"modalityLabel\": \"epi\",\n\"criteria\": {\n\"SeriesDescription\": \"fmap_task-learning\"\n},\n\"IntendedFor\": 2,\n\"sidecarChanges\": {\n\"TaskName\": \"learning\"\n}\n}\n]\n}\n</code></pre> <p>The <code>descriptions</code> field is a list of descriptions, each describing some acquisition. In this example, the configuration describes five acquisitions, a T2-weighted, a resting-state fMRI, a fieldmap, and an fMRI learning task with another fieldmap.</p> <p>Each description tells dcm2bids how to group a set of acquisitions and how to label them. In this config file, Dcm2Bids is being told to collect files containing</p> <pre><code>{\n\"SeriesDescription\": \"AXIAL_T2_SPACE\",\n\"EchoTime\": 0.1\n}\n</code></pre> <p>in their sidecars1 and label them as <code>anat</code>, <code>T2w</code> type images.</p>"},{"location":"how-to/create-config-file/#criteria","title":"criteria","text":"<p>dcm2bids will try to match the sidecars1 of dcm2niix to the descriptions of the configuration file. The values you enter inside the criteria dictionary are patterns that will be compared to the corresponding key of the sidecar.</p> <p>The pattern matching is shell-style. It's possible to use wildcard <code>*</code>, single character <code>?</code> etc ... Please have a look at the GNU documentation to know more.</p> <p>For example, in the second description, the pattern <code>*T2*</code> will be compared to the value of <code>SeriesDescription</code> of a sidecar. <code>AXIAL_T2_SPACE</code> will be a match, <code>AXIAL_T1</code> won't.</p> <p><code>dcm2bids</code> has a <code>SidecarFilename</code> key, as in the first description, if you prefer to also match with the filename of the sidecar. Note that filename are subject to change depending on the dcm2niix version in use.</p> <p>You can enter several criteria. All criteria must match for a description to be linked to a sidecar.</p>"},{"location":"how-to/create-config-file/#datatype","title":"dataType","text":"<p>It is a mandatory field. Here is a definition from <code>bids v1.2.0</code> :</p> <p>Data type - a functional group of different types of data. In BIDS we define six data types: func (task based and resting state functional MRI), dwi (diffusion weighted imaging), fmap (field inhomogeneity mapping data such as field maps), anat (structural imaging such as T1, T2, etc.), meg (magnetoencephalography), beh (behavioral).</p>"},{"location":"how-to/create-config-file/#modalitylabel","title":"modalityLabel","text":"<p>It is a mandatory field. It describes the modality of the acquisition like <code>T1w</code>, <code>T2w</code> or <code>dwi</code>, <code>bold</code>.</p>"},{"location":"how-to/create-config-file/#customlabels","title":"customLabels","text":"<p>It is an optional field. For some acquisitions, you need to add information in the file name. For resting state fMRI, it is usually <code>task-rest</code>.</p> <p>To know more on how to set these fields, read the BIDS specifications.</p> <p>For a longer example of a Dcm2Bids config json, see here.</p>"},{"location":"how-to/create-config-file/#sidecarchanges","title":"sidecarChanges","text":"<p>Optional field to change or add information in a sidecar.</p>"},{"location":"how-to/create-config-file/#intendedfor","title":"intendedFor","text":"<p>Optional field to add an <code>IntendedFor</code> entry in the sidecar of a fieldmap. Just put the index or a list of indices of the description(s) that's intended for.</p> <p>Python index begins at <code>0</code> so in the example, <code>1</code> means it is intended for <code>task-rest_bold</code> and <code>2</code> is intended for <code>task-learning</code> which will be renamed to only <code>learning</code> because of the <code>\"sidecarChanges\": { \"TaskName\": \"learning\" }</code> field.</p>"},{"location":"how-to/create-config-file/#multiple-config-files","title":"Multiple config files","text":"<p>It is possible to create multiple config files and iterate the <code>dcm2bids</code> command over the different config files to structure data that have different parameters in their sidecar files.</p> <ol> <li> <p>For each acquisition, <code>dcm2niix</code> creates an associated <code>.json</code> file, containing information from the dicom header. These are known as sidecars. These are the sidecars that <code>dcm2bids</code> uses to filter the groups of acquisitions.</p> <p>To define the filters you need, you will probably have to review these sidecars. You can generate all the sidecars for an individual participant using the dcm2bids_helper command.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"how-to/get-help/","title":"How to get help and support","text":"<p>We work hard to make sure dcm2bids is robust and we welcome comments and questions to make sure it meets your use case!</p> <p>While the dcm2bids volunteers and the neuroimaging community at large do their best to respond to help requests about dcm2bids, there are steps you can do to try to find answers and ways to optimize how to ask questions on the different channels. The path may be different according to your situation whether you want to ask a usage question or report a bug.</p>"},{"location":"how-to/get-help/#where-to-look-for-answers","title":"Where to look for answers","text":"<p>Before looking for answers on any Web search engine, the best places to look for answers are:</p>"},{"location":"how-to/get-help/#1-this-documentation","title":"1. This documentation","text":"<p>You can use the built-in search function with key words or look throughout the documentation. If you end up finding your answer somewhere else, please inform us by opening an issue. If you faced an undocumented challenge while using dcm2bids, it is very likely others will face it as well. By gathering community knowledge, the documentation will improve drastically. Refer to the Request a new feature section below if you are unfamiliar with GitHub and issues.</p>"},{"location":"how-to/get-help/#2-community-support-channels","title":"2. Community support channels","text":"<p>There is a couple of places you can look for</p>"},{"location":"how-to/get-help/#neurostars","title":"NeuroStars","text":"<p>What is neurostars.org?</p> <p>NeuroStars is a question and answer forum for neuroscience researchers, infrastructure providers and software developers, and free to access. It is managed by the [International Neuroinformatics Coordinating Facility (INCF)][incf] and it is widely used by the neuroimaging community.</p> <p>NeuroStars is a gold mine of information about how others solved their problems or got answered to their questions regarding anything neuroscience, especially neuroimaging. NeuroStars is a good place to ask questions related to dcm2bids and the BIDS standards. Before asking your own questions, you may want to first browse through questions that were tagged with the dcm2bids tag.</p> <p>To look for everything related to a specific tag, here's how you can do it for the dcm2bids tag:</p> <p>The quick way</p> <p>Type in your URL bar https://neurostars.org/tag/dcm2bids or click directly on it to bring the page will all post tagged with a dcm2bids tag. Then if you click on search, the dcm2bids will already be selected for you.</p> <ol> <li>Go to https://neurostars.org.</li> <li>Click on the search () icon.</li> <li>Either click on options to bring the advanced search and go to next step     OR start typing dcm2bids.</li> <li>In the tag section on the right pane, select dcm2bids.</li> <li> <p>Type your question in the search bar.     </p> <ul> <li>You might have to refine your question a couple of times to find the most relevant answers. </li> </ul> </li> </ol> Steps in pictures <p> </p> <p>The next step before going on a search engine is to go where we develop dcm2bids, namely GitHub.</p>"},{"location":"how-to/get-help/#github","title":"GitHub","text":"<p>While we use GitHub to develop dcm2bids, some people have opened issues that could be relevant to your situation. You can browse through the open and closed issues: https://github.com/UNFmontreal/Dcm2Bids/issues?q=is%3Aissue and search for specific keywords or error messages.</p> <p>If you find a specific issue and would like more details about it, you can simply write an additional comment in the Leave a comment section and press Comment.</p> Example in picture <p> </p>"},{"location":"how-to/get-help/#where-to-ask-for-questions-report-a-bug-or-request-a-feature","title":"Where to ask for questions, report a bug or request a feature","text":"<p>After having read thoroughly all information you could find online about your question or issue, you may still some lingering questions or even more questions - that is okay! After all, maybe you would like to use dcm2bids for a specific use-case that has never been mentioned anywhere before. Below are described 3 ways to request help depending on your situation:</p> <ol> <li>Ask a question about dcm2bids</li> <li>Report a bug</li> <li>Request a new feature</li> </ol>"},{"location":"how-to/get-help/#questions-related-to-using-dcm2bids","title":"Questions related to using dcm2bids:","text":"<p>We encourage you to post your question on NeuroStars with dcm2bids as an optional tag. The tag is really important because NeuroStars will notify the <code>dcm2bids</code> team only if the tag is present. You will get a quicker reply this way.</p>"},{"location":"how-to/get-help/#report-a-bug","title":"Report a bug","text":"<p>If you think you've found a bug , and you could not find an issue already mentioning the problem, please open an issue on our repository. If you don't know how to open an issue, refer to the open an issue section below.</p>"},{"location":"how-to/get-help/#request-a-new-feature","title":"Request a new feature","text":"<p>If you have more an inquiry or suggestion to make than a bug to report, we encourage you to start a conversation in the Discussions section. Similar to the bug reporting procedure, follow the open an issue below.</p>"},{"location":"how-to/get-help/#open-an-issue","title":"Open an issue","text":"<p>To open or comment on an issue, you will need a GitHub account.</p> <p>Issues are individual pieces of work (a bug to fix or a feature) that need to be completed to move the project forwards. We highly recommend you open an issue to explain what you want to do and how it echoes a specific demand from the community. Keep in mind the scope of the <code>dcm2bids</code> project.</p> <p>A general guideline: if you find yourself tempted to write a great big issue that is difficult to describe as one unit of work, please consider splitting it into two or more. Moreover, it will be interesting to see how others approach your issue and give their opinion and advice to solve it.</p> <p>If you have more an inquiry or suggestion to make than a bug to report, we encourage you to start a conversation in the Discussions section. Note that issues may be converted to a discussion if deemed relevant by the maintainers.</p>"},{"location":"how-to/use-advanced-commands/","title":"How to use advanced commands and configuration","text":"<p>These optional configurations could be insert in the configuration file at the same level as the <code>\"descriptions\"</code> entry.</p> <pre><code>{\n    \"searchMethod\": \"fnmatch\",\n    \"caseSensitive\": true,\n    \"defaceTpl\": [\"pydeface\", \"--outfile\", \"dstFile\", \"srcFile\"],\n    \"description\": [\n        ...\n    ]\n}\n</code></pre>"},{"location":"how-to/use-advanced-commands/#searchmethod","title":"searchMethod","text":"<p>default: <code>\"searchMethod\": \"fnmatch\"</code></p> <p>fnmatch is the behaviour (See criteria) by default and the fall back if this option is set incorrectly. <code>re</code> is the other choice if you want more flexibility to match criteria.</p>"},{"location":"how-to/use-advanced-commands/#casesensitive","title":"caseSensitive","text":"<p>default: <code>\"caseSensitive\": \"true\"</code></p> <p>If false, comparisons between strings/lists will be not case sensitive. It's only disabled when used with <code>\"searchMethod\": \"fnmatch\"</code>.</p>"},{"location":"how-to/use-advanced-commands/#defacetpl","title":"defaceTpl","text":"<p>default: <code>\"defaceTpl\": None</code></p> <p>!!! danger The anonymizer option no longer exists from <code>v2.0.0</code>. It is still possible to deface the anatomical nifti images.</p> <p>For example, if you use the last version of pydeface, add:</p> <p><code>\"defaceTpl\": \"pydeface --outfile {dstFile} {srcFile}\"</code></p> <p>It is a template string and dcm2bids will replace {srcFile} and {dstFile} by the source file (input) and the destination file (output).</p>"},{"location":"how-to/use-advanced-commands/#dcm2niixoptions","title":"dcm2niixOptions","text":"<p>default: <code>\"dcm2niixOptions\": \"-b y -ba y -z y -f '%3s_%f_%p_%t'\"</code></p> <p>Arguments for dcm2niix</p>"},{"location":"how-to/use-advanced-commands/#compkeys","title":"compKeys","text":"<p>default: <code>\"compKeys\": [\"SeriesNumber\", \"AcquisitionTime\", \"SidecarFilename\"]</code></p> <p>Acquisitions are sorted using the sidecar data. The default behaviour is to sort by <code>SeriesNumber</code> then by <code>AcquisitionTime</code> then by the <code>SidecarFilename</code>. You can change this behaviour setting this key inside the configuration file.</p>"},{"location":"how-to/use-main-commands/","title":"How to use main commands","text":""},{"location":"how-to/use-main-commands/#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p>How to launch dcm2bids when you have build your configuration file ? First <code>cd</code> in your BIDS directory.</p> <pre><code>dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -c CONFIG_FILE\n</code></pre> <p>If your participant have a session ID:</p> <pre><code>dcm2bids -d DICOM_DIR -p PARTICIPANT_ID -s SESSION_ID -c CONFIG_FILE\n</code></pre> <p>dcm2bids creates log files inside <code>tmp_dcm2bids/log</code></p> <p>See <code>dcm2bids -h</code> or <code>dcm2bids --help</code> to show the help message that contains more information.</p> <p>Important</p> <p>If your directory or file names have space in them, we recommend that you change all the spaces for another character (<code>_</code> or <code>-</code>) but if you can't change the names, you have to wrap each argument with quotes as in the exemple below: </p> <p><code>dcm2bids -d \"DICOM DIR\" -p PARTICIPANT_ID -c \"path/with spaces to/CONFIG FILE.json\"</code></p>"},{"location":"how-to/use-main-commands/#output","title":"Output","text":"<p>dcm2bids creates a <code>sub-&lt;PARTICIPANT_ID&gt;</code> directory in the output directory (by default the folder where the script is launched).</p> <p>Sidecars with one matching description will be convert to BIDS. If a file already exists, dcm2bids won't overwrite it. You should use the <code>--clobber</code> option to overwrite files.</p> <p>If a description matches several sidecars, dcm2bids will add automatically the custom label <code>run-</code> to the filename.</p> <p>Sidecars with no or more than one matching descriptions are kept in <code>tmp_dcm2bids</code> directory. Users can review these mismatches to change the configuration file accordingly.</p>"},{"location":"how-to/use-main-commands/#tools","title":"Tools","text":"<ul> <li>Helper</li> </ul> <pre><code>dcm2bids_helper -d DICOM_DIR [-o OUTPUT_DIR]\n</code></pre> <p>To build the configuration file, you need to have a example of the sidecars. You can use <code>dcm2bids_helper</code> with the DICOMs of one participant. It will launch dcm2niix and save the result inside the <code>tmp_dcm2bids/helper</code> of the output directory.</p> <ul> <li>Scaffold</li> </ul> <pre><code>dcm2bids_scaffold [-o OUTPUT_DIR]\n</code></pre> <p>Create basic BIDS files and directories in the output directory (by default folder where the script is launched).</p> <ol> <li> <p>For each acquisition, <code>dcm2niix</code> creates an associated <code>.json</code> file, containing information from the dicom header. These are known as sidecars. These are the sidecars <code>dcm2bids</code> uses to filter the groups of acquisitions.</p> <p>To define this filtering you will probably need to review these sidecars. You can generate all the sidecars for an individual participant using dcm2bids_helper.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/","title":"Tutorials","text":"<p>Get to know dcm2bids through tutorials that describe in depth the dcm2bids commands.</p> <p>First steps with dcm2bids</p> <p>Interested in co-developing a tutorial?</p> <p>Whether you are a beginning or an advanced user, your input and effort would be greatly welcome. We will help you through the process of writing a good tutorial on your use-case.</p> <p>Get in contact with us on GitHub</p>"},{"location":"tutorial/first-steps/","title":"Tutorial - First steps","text":""},{"location":"tutorial/first-steps/#how-to-use-this-tutorial","title":"How to use this tutorial","text":"<p>This tutorial was developed assuming no prior knowledge of the tool, and little knowledge of the command line (terminal). It aims to be beginner-friendly by giving a lot of details. To get the most out of it, you recommend that you run the commands throughout the tutorial and compare your outputs with the outputs from the example.</p> <p>Every time you need to run a command, you will see two tabs, one for the command you need to run, and another one with the expected output. While you can copy the command, you recommend that you type each command, which is good for your procedural memory :brain:. The Command and Output tabs will look like these:</p> CommandOutput <pre><code>echo \"Hello, World!\"\n</code></pre> <pre><code>sam:~/$ echo \"Hello, World!\"\nHello, World!\n</code></pre> <p>Note that in the Output tab, the content before the command prompt (<code>$</code>) will be dependend or your operating system and terminal configuration. What you want to compare is what follows it and the output below the command that was ran. The output you see was taken directly out of your terminal when you tested the tutorial.</p>"},{"location":"tutorial/first-steps/#setup","title":"Setup","text":"<p>dcm2bids must be installed</p> <p>If you have not installed dcm2bids yet, now is the time to go to the installation page and install dcm2bids with its dependencies. This tutorial does not cover the installation part and assumes you have dcm2bids properly installed.</p>"},{"location":"tutorial/first-steps/#activate-your-dcm2bids-environment","title":"Activate your dcm2bids environment","text":"<p>If you followed the installation procedure, you have to activate your dedicated environment for dcm2bids.</p> <p>Note that you use <code>dcm2bids</code> as the name of the environment but you should use the name you gave your environment when you created it.</p> <p>If you used Anaconda Navigator to install dcm2bids and create you environment, make sure to open your environment from Navigator as indicated in Create your environment with the Anaconda Navigator GUI.</p> CommandOutput <pre><code>conda activate dcm2bids\n</code></pre> <pre><code>conda activate dcm2bids\n(dcm2bids) sam:~$\n</code></pre>"},{"location":"tutorial/first-steps/#test-your-environment","title":"Test your environment","text":"<p>It is always good to make sure you have access to the software you want to use. You can test it with any command but a safe way is to use the <code>--help</code> command.</p> CommandOutput <pre><code>dcm2bids --help\n</code></pre> <pre><code>(dcm2bids) sam:~$ dcm2bids --help\nusage: dcm2bids [-h] -d DICOM_DIR [DICOM_DIR ...] -p PARTICIPANT [-s SESSION] -c\n                CONFIG [-o OUTPUT_DIR] [--forceDcm2niix] [--clobber]\n[-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [-a]\n\nReorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure\ndcm2bids 2.1.7\n\noptions:\n-h, --help            show this help message and exit\n-d DICOM_DIR [DICOM_DIR ...], --dicom_dir DICOM_DIR [DICOM_DIR ...]\nDICOM directory(ies)\n-p PARTICIPANT, --participant PARTICIPANT\n                        Participant ID\n-s SESSION, --session SESSION\n                        Session ID\n-c CONFIG, --config CONFIG\n                        JSON configuration file (see example/config.json)\n-o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        Output BIDS directory, Default: current directory\n                        (/home/sam)\n--forceDcm2niix       Overwrite previous temporary dcm2niix output if it exists\n--clobber             Overwrite output if it exists\n-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}, --log_level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\nSet logging level\n-a, --anonymizer      This option no longer exists from the script in this\n                        release. See:https://github.com/unfmontreal/Dcm2Bids/blob/m\n                        aster/README.md#defaceTpl\n\n            Documentation at https://github.com/unfmontreal/Dcm2Bids\n</code></pre> What you can do if you did not get this output <p>If you got <code>dcm2bids: command not found</code>, it means dcm2bids is not either not installed or not accessible in your current environment. Did you activate your environment?</p> <p>Visit the installation page for more info.</p>"},{"location":"tutorial/first-steps/#create-a-new-directory-for-this-tutorial","title":"Create a new directory for this tutorial","text":"<p>For the tutorial, you recommend that you create a new directory (folder) instead of jumping straight into a real project directory with real data. In this tutorial, we decided to named our project directory <code>dcm2bids-tutorial</code>.</p> CommandOutput <pre><code>mkdir dcm2bids-tutorial\ncd dcm2bids-tutorial\n</code></pre> <pre><code>(dcm2bids) sam:~$ mkdir dcm2bids-tutorial\n(dcm2bids) sam:~$ cd dcm2bids-tutorial/\n(dcm2bids) sam:~/dcm2bids-tutorial$\n# no output is printed by mkdir and cd if when the command is successful.\n# You can now see that you are inside dcm2bids-tutorial directory.\n</code></pre>"},{"location":"tutorial/first-steps/#scaffolding","title":"Scaffolding","text":"<p>While scaffolding is a not mandatory step before converting data with the main <code>dcm2bids</code> command, it is highly recommended when you plan to convert data. dcm2bids has a command named <code>dcm2bids_scaffold</code> that will help you structure and organize your data in an efficient way by creating automatically for you a basic directory structure and the core files according to the Brain Imaging Data Structure (BIDS) specification.</p>"},{"location":"tutorial/first-steps/#tree-structure-of-the-scaffold-created-by-dcm2bids","title":"Tree structure of the scaffold created by dcm2bids","text":"<pre><code>scaffold_directory/\n\u251c\u2500\u2500 CHANGES\n\u251c\u2500\u2500 code/\n\u251c\u2500\u2500 dataset_description.json\n\u251c\u2500\u2500 derivatives/\n\u251c\u2500\u2500 participants.json\n\u251c\u2500\u2500 participants.tsv\n\u251c\u2500\u2500 README\n\u2514\u2500\u2500 sourcedata/\n\n3 directories, 5 files\n</code></pre> <p>Describing the function of each directory and files is out of the scope of this tutorial but if you want to learn more about BIDS, you encourage you to go through the BIDS Starter Kit.</p>"},{"location":"tutorial/first-steps/#run-dcm2bids_scaffold","title":"Run <code>dcm2bids_scaffold</code>","text":"<p>To find out how to run <code>dcm2bids_scaffold</code> work, you can use the <code>--help</code> option.</p> CommandOutput <pre><code>dcm2bids_scaffold --help\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial$ dcm2bids_scaffold --help\nusage: dcm2bids_scaffold [-h] [-o OUTPUT_DIR]\n\nCreate basic BIDS files and directories\n\n\noptions:\n-h, --help            show this help message and exit\n-o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        Output BIDS directory, Default: current directory\n\nDocumentation at https://github.com/unfmontreal/Dcm2Bids\n</code></pre> <p>As you can see at lines 9-10, <code>dcm2bids_scaffold</code> has an <code>--output_dir</code> (or <code>-o</code> for short) option with a default option, which means you can either specify where you want the scaffolding to happen to be or it will create the scaffold in the current directory as a default.</p> <p>Below you can see the difference between specifying <code>-o output_dir</code> and NOT specifying (using the default) the <code>-o</code> option.</p> <p>Note that you don't have to create the directory where you want to put the scaffold beforehand, the command will create it for you.</p> CommandsOutput <p><pre><code>dcm2bids_scaffold\n</code></pre> VS</p> <pre><code>dcm2bids_scaffold -o bids_project\n</code></pre> <p><pre><code>(dcm2bids) sam:~/dcm2bids-tutorial$ dcm2bids_scaffold\n(dcm2bids) sam:~/dcm2bids-tutorial$ ls\nCHANGES  dataset_description.json  participants.json  README\ncode     derivatives               participants.tsv   sourcedata\n</code></pre> VS</p> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial$ dcm2bids_scaffold -o bids_project\n(dcm2bids) sam:~/dcm2bids-tutorial$ ls -F\nbids_project/\n(dcm2bids) sam:~/dcm2bids-tutorial$ ls -F bids_project/\nCHANGES  dataset_description.json  participants.json  README\ncode/    derivatives/              participants.tsv   sourcedata/\n</code></pre> <p>For the purpose of the tutorial, you chose to specify the output directory <code>bids_project</code> as if it were the start of a new project. For your real projects, you can choose to create a new directory with the commands or not, it is entirely up to you.</p>"},{"location":"tutorial/first-steps/#change-directory-to-go-in-your-scaffold","title":"Change directory to go in your scaffold","text":"<p>For those who created the scaffold in another directory, you must go inside that directory.</p> CommandOutput <pre><code>cd bids_project\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial$ cd bids_project/\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$\n</code></pre>"},{"location":"tutorial/first-steps/#download-neuroimaging-data","title":"Download neuroimaging data","text":"<p>For this tutorial, you will use a set of DICOMs made available by [neurolabusc][dcm_qa_nih] on GitHub.</p> Why use these data in particular? <p>You use the dcm_qa_nih data because it is the data used by the dcm2niix developers to validate the DICOM to NIfTI conversion process and it has been proven stable since 2017. It also includes data from both GE as well as Siemens MRI scanners so it gives a bit a diversity of data provenance.</p> <p>To download the data, you can use your terminal or the GitHub interface. You can do it any way you want as long as the directory with the dicoms is in sourcedata directory with the name dcm_qa_nih.</p> TerminalGitHub CommandsOutput <ol> <li> <p>Download the zipped file from https://github.com/neurolabusc/dcm_qa_nih/archive/refs/heads/master.zip. <pre><code>wget -O dcm_qa_nih-master.zip https://github.com/neurolabusc/dcm_qa_nih/archive/refs/heads/master.zip\n</code></pre></p> </li> <li> <p>Extract/unzip the zipped file into sourcedata/. <pre><code>unzip dcm_qa_nih-master.zip -d sourcedata/\n</code></pre></p> </li> <li> <p>Rename the directory dcm_qa_nih. <pre><code>mv sourcedata/dcm_qa_nih-master sourcedata/dcm_qa_nih\n</code></pre></p> </li> </ol> <p>OR</p> <ol> <li>You can clone the repository if you are familiar with Git. If you did the steps above, move on. <pre><code>git clone https://github.com/neurolabusc/dcm_qa_nih/ sourcedata/dcm_qa_nih\n</code></pre></li> </ol> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ wget -O dcm_qa_nih-master.zip https://github.com/neurolabusc/dcm_qa_nih/archive/refs/heads/master.zip\n--2022-04-18 22:17:26--  https://github.com/neurolabusc/dcm_qa_nih/archive/refs/heads/master.zip\nResolving github.com (github.com)... 140.82.112.3\nConnecting to github.com (github.com)|140.82.112.3|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://codeload.github.com/neurolabusc/dcm_qa_nih/zip/refs/heads/master [following]\n--2022-04-18 22:17:26--  https://codeload.github.com/neurolabusc/dcm_qa_nih/zip/refs/heads/master\nResolving codeload.github.com (codeload.github.com)... 140.82.113.9\nConnecting to codeload.github.com (codeload.github.com)|140.82.113.9|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 10258820 (9.8M) [application/zip]\nSaving to: \u2018dcm_qa_nih-master.zip\u2019\n\ndcm_qa_nih-master.zip 100%[======================&gt;]   9.78M  3.24MB/s    in 3.0s\n\n2022-04-18 22:17:29 (3.24 MB/s) - \u2018dcm_qa_nih-master.zip\u2019 saved [10258820/10258820]\n\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ unzip dcm_qa_nih-master.zip -d sourcedata/\nArchive:  dcm_qa_nih-master.zip\naa82e560d5471b53f0d0332c4de33d88bf179157\ncreating: sourcedata/dcm_qa_nih-master/\nextracting: sourcedata/dcm_qa_nih-master/.gitignore\ncreating: sourcedata/dcm_qa_nih-master/In/\ncreating: sourcedata/dcm_qa_nih-master/In/20180918GE/\ninflating: sourcedata/dcm_qa_nih-master/In/20180918GE/README-Study.txt\ncreating: sourcedata/dcm_qa_nih-master/In/20180918GE/mr_0004/\ninflating: sourcedata/dcm_qa_nih-master/In/20180918GE/mr_0004/README-Series.txt\ninflating: sourcedata/dcm_qa_nih-master/In/20180918GE/mr_0004/axial_epi_fmri_interleaved_i_to_s-00001.dcm\n# [...] output was manually truncated because it was really really long\ninflating: sourcedata/dcm_qa_nih-master/Ref/EPI_PE=RL_5.nii\ninflating: sourcedata/dcm_qa_nih-master/batch.sh\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ mv sourcedata/dcm_qa_nih-master sourcedata/dcm_qa_nih\n</code></pre> <ol> <li>Go to: https://github.com/neurolabusc/dcm_qa_nih and click on the green button (Code) to download ZIP.</li> </ol> <p> </p> <ol> <li>Download the zipped file.</li> <li>Extract/unzip the zipped file to the sourcedata directory inside your scaffold and rename the newly created directory dcm_qa_nih.</li> </ol> <p>You should now have a <code>dcm_qa_nih</code> directory nested in <code>sourcedata</code> with a bunch of files and directories:</p> CommandOutput <pre><code>ls sourcedata/dcm_qa_nih\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ ls sourcedata/dcm_qa_nih/\nbatch.sh  In  LICENSE  README.md  Ref\n</code></pre>"},{"location":"tutorial/first-steps/#building-the-configuration-file","title":"Building the configuration file","text":"<p>The configuration file is the central element for dcm2bids to organize your data into the Brain Imaging Data Structure standard. dcm2bids uses information from the config file to determine which data in the protocol will be converted, and how they will be renamed based on a set of rules. For this reason, it is important to have a little understanding of the core BIDS principles. The BIDS Starter Kit a good place to start Tutorial on Annotating a BIDS dataset from .</p> <p>As you will see below, the configuration file must be structured in the Javascript Object Notation (JSON) format.</p> <p>More info about the configuration file</p> <p>The How-to guide on creating a config file provides useful information about required and optional fields, and the inner working of a config file.</p> <p>In short you need a configuration file because, for each acquisition, <code>dcm2niix</code> creates an associated <code>.json</code> file, containing information from the dicom header. These are known as sidecar files. These are the sidecars that <code>dcm2bids</code> uses to filter the groups of acquisitions based on the configuration file.</p> <p>You have to input the filters yourself, which is way easier to define when you have access to an example of the sidecar files.</p> <p>You can generate all the sidecar files for an individual participant using the dcm2bids_helper command.</p>"},{"location":"tutorial/first-steps/#dcm2bids_helper-command","title":"<code>dcm2bids_helper</code> command","text":"<p>This command will convert the DICOM files it finds to NIfTI files and save them inside a temporary directory for you to inspect and make some filters for the config file.</p> <p>As usual the first command will be to request the help info.</p> CommandOutput <pre><code>dcm2bids_helper --help\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ dcm2bids_helper --help\nusage: dcm2bids_helper [-h] -d DICOM_DIR [DICOM_DIR ...] [-o OUTPUT_DIR]\n\noptions:\n-h, --help            show this help message and exit\n-d DICOM_DIR [DICOM_DIR ...], --dicom_dir DICOM_DIR [DICOM_DIR ...]\nDICOM files directory\n-o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        Output BIDS directory, Default: current directory\n\n            Documentation at https://github.com/unfmontreal/Dcm2Bids\n</code></pre> <p>To run the commands, you have to specify the <code>-d</code> option, namely the input directory containing the DICOM files. The <code>-o</code> option is optional, defaulting to moving the files inside a new <code>tmp_dcm2bids/helper</code> directory from where you run the command, the current directory.</p> <p>Use one participant only</p> <p>For this tutorial, it is easy since you there are only few data. However, in project with many participants, it is recommended to use data from one one session of one participant only by targeting their directory, otherwise you may be overwhelmed by the number of files for nothing.</p> <p>In this tutorial, there are two folders with data, one with data coming from a Siemens scanner (<code>20180918Si</code>), and one with data coming from GE (20180918GE). The tutorial will use the data acquired on both scanners and Siemens scanner located in <code>sourcedata/dcm_qa_nih/In/</code> and pretend it is one participant only.</p> CommandOutput <pre><code>dcm2bids_helper -d sourcedata/dcm_qa_nih/In/\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ dcm2bids_helper -d sourcedata/dcm_qa_nih/In/\nExample in:\n/home/sam/dcm2bids-tutorial/bids_project/tmp_dcm2bids/helper\n</code></pre>"},{"location":"tutorial/first-steps/#finding-what-you-need-in-tmp_dcm2bidshelper","title":"Finding what you need in tmp_dcm2bids/helper","text":"<p>You should now able to see a list of compressed NIfTI files (<code>nii.gz</code>) with their respective sidecar files (<code>.json</code>). You can tell which file goes with which file based on their identical names, only with a</p> CommandOutput <pre><code>ls tmp_dcm2bids/helper\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ ls tmp_dcm2bids/helper/\n'003_In_EPI_PE=AP_20180918121230.json'\n'003_In_EPI_PE=AP_20180918121230.nii.gz'\n004_In_DCM2NIIX_regression_test_20180918114023.json\n004_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n'004_In_EPI_PE=PA_20180918121230.json'\n'004_In_EPI_PE=PA_20180918121230.nii.gz'\n005_In_DCM2NIIX_regression_test_20180918114023.json\n005_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n'005_In_EPI_PE=RL_20180918121230.json'\n'005_In_EPI_PE=RL_20180918121230.nii.gz'\n006_In_DCM2NIIX_regression_test_20180918114023.json\n006_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n'006_In_EPI_PE=LR_20180918121230.json'\n'006_In_EPI_PE=LR_20180918121230.nii.gz'\n007_In_DCM2NIIX_regression_test_20180918114023.json\n007_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n</code></pre> <p>As you can see, it is not necessarily easy to tell which scan files (<code>nii.gz</code>) refer to which acquisitions from their names only. That is why you have to go through their sidecar files to find unique identifiers for one acquisiton you want to BIDSify.</p> <p>Go ahead and use any code editor, file viewer or your terminal to inspect the sidecar files.</p> <p>Here, we compare two files that have similar names to highlight their differences:</p> CommandOutput <pre><code>diff --side-by-side tmp_dcm2bids/helper/\"003_In_EPI_PE=AP_20180918121230.json\" tmp_dcm2bids/helper/\"004_In_EPI_PE=PA_20180918121230.json\"\n</code></pre> <ul> <li>Note than in this example, the filename are wrapped with quotes (<code>\"</code>) as in <code>\"filename.ext\"</code> because there is an <code>=</code> include in the name. You have to wrap your filenames if they contains special characters, including spaces. To avoid weird problems, we highly recommend to use alphanumeric only names when you can choose the name of your MRI protocols and sequences.</li> </ul> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ diff --side-by-side tmp_dcm2bids/helper/003_In_EPI_PE\\=AP_20180918121230.json tmp_dcm2bids/helper/004_In_EPI_PE\\=PA_20180918121230.json\n{                                                           {\n\"Modality\": \"MR\",                                           \"Modality\": \"MR\",\n    \"MagneticFieldStrength\": 3,                                 \"MagneticFieldStrength\": 3,\n    \"ImagingFrequency\": 123.204,                                \"ImagingFrequency\": 123.204,\n    \"Manufacturer\": \"Siemens\",                                  \"Manufacturer\": \"Siemens\",\n    \"ManufacturersModelName\": \"Skyra\",                          \"ManufacturersModelName\": \"Skyra\",\n    \"InstitutionName\": \"NIH\",                                   \"InstitutionName\": \"NIH\",\n    \"InstitutionalDepartmentName\": \"FMRIF 3TD\",                 \"InstitutionalDepartmentName\": \"FMRIF 3TD\",\n    \"InstitutionAddress\": \"10 Center Drive Building 10 Ro       \"InstitutionAddress\": \"10 Center Drive Building 10 Ro\n    \"DeviceSerialNumber\": \"45160\",                              \"DeviceSerialNumber\": \"45160\",\n    \"StationName\": \"AWP45160\",                                  \"StationName\": \"AWP45160\",\n    \"BodyPartExamined\": \"BRAIN\",                                \"BodyPartExamined\": \"BRAIN\",\n    \"PatientPosition\": \"HFS\",                                   \"PatientPosition\": \"HFS\",\n    \"ProcedureStepDescription\": \"FMRIF^QA\",                     \"ProcedureStepDescription\": \"FMRIF^QA\",\n    \"SoftwareVersions\": \"syngo MR E11\",                         \"SoftwareVersions\": \"syngo MR E11\",\n    \"MRAcquisitionType\": \"2D\",                                  \"MRAcquisitionType\": \"2D\",\n    \"SeriesDescription\": \"EPI PE=AP\",                      |    \"SeriesDescription\": \"EPI PE=PA\",\n    \"ProtocolName\": \"EPI PE=AP\",                           |    \"ProtocolName\": \"EPI PE=PA\",\n    \"ScanningSequence\": \"EP\",                                   \"ScanningSequence\": \"EP\",\n    \"SequenceVariant\": \"SK\",                                    \"SequenceVariant\": \"SK\",\n    \"ScanOptions\": \"FS\",                                        \"ScanOptions\": \"FS\",\n    \"SequenceName\": \"epfid2d1_72\",                              \"SequenceName\": \"epfid2d1_72\",\n    \"ImageType\": [\"ORIGINAL\", \"PRIMARY\", \"M\", \"ND\", \"ECHO       \"ImageType\": [\"ORIGINAL\", \"PRIMARY\", \"M\", \"ND\", \"ECHO\n    \"SeriesNumber\": 3,                                     |    \"SeriesNumber\": 4,\n    \"AcquisitionTime\": \"12:24:58.102500\",                  |    \"AcquisitionTime\": \"12:26:54.517500\",\n    \"AcquisitionNumber\": 1,                                     \"AcquisitionNumber\": 1,\n    \"ImageComments\": \"None\",                                    \"ImageComments\": \"None\",\n    \"SliceThickness\": 3,                                        \"SliceThickness\": 3,\n    \"SpacingBetweenSlices\": 12,                                 \"SpacingBetweenSlices\": 12,\n    \"SAR\": 0.00556578,                                          \"SAR\": 0.00556578,\n    \"EchoTime\": 0.05,                                           \"EchoTime\": 0.05,\n    \"RepetitionTime\": 2.43537,                                  \"RepetitionTime\": 2.43537,\n    \"FlipAngle\": 75,                                            \"FlipAngle\": 75,\n    \"PartialFourier\": 1,                                        \"PartialFourier\": 1,\n    \"BaseResolution\": 72,                                       \"BaseResolution\": 72,\n    \"ShimSetting\": [                                            \"ShimSetting\": [\n-3717,                                                      -3717,\n        15233,                                                      15233,\n        -9833,                                                      -9833,\n        -207,                                                       -207,\n        -312,                                                       -312,\n        -110,                                                       -110,\n        150,                                                        150,\n        226    ],                                                   226],\n    \"TxRefAmp\": 316.97,                                         \"TxRefAmp\": 316.97,\n    \"PhaseResolution\": 1,                                       \"PhaseResolution\": 1,\n    \"ReceiveCoilName\": \"Head_32\",                               \"ReceiveCoilName\": \"Head_32\",\n    \"ReceiveCoilActiveElements\": \"HEA;HEP\",                     \"ReceiveCoilActiveElements\": \"HEA;HEP\",\n    \"PulseSequenceDetails\": \"%CustomerSeq%\\\\nih_ep2d_bold       \"PulseSequenceDetails\": \"%CustomerSeq%\\\\nih_ep2d_bold\n    \"CoilCombinationMethod\": \"Sum of Squares\",                  \"CoilCombinationMethod\": \"Sum of Squares\",\n    \"ConsistencyInfo\": \"N4_VE11C_LATEST_20160120\",              \"ConsistencyInfo\": \"N4_VE11C_LATEST_20160120\",\n    \"MatrixCoilMode\": \"SENSE\",                                  \"MatrixCoilMode\": \"SENSE\",\n    \"PercentPhaseFOV\": 100,                                     \"PercentPhaseFOV\": 100,\n    \"PercentSampling\": 100,                                     \"PercentSampling\": 100,\n    \"EchoTrainLength\": 72,                                      \"EchoTrainLength\": 72,\n    \"PhaseEncodingSteps\": 72,                                   \"PhaseEncodingSteps\": 72,\n    \"AcquisitionMatrixPE\": 72,                                  \"AcquisitionMatrixPE\": 72,\n    \"ReconMatrixPE\": 72,                                        \"ReconMatrixPE\": 72,\n    \"BandwidthPerPixelPhaseEncode\": 27.778,                     \"BandwidthPerPixelPhaseEncode\": 27.778,\n    \"EffectiveEchoSpacing\": 0.000499996,                        \"EffectiveEchoSpacing\": 0.000499996,\n    \"DerivedVendorReportedEchoSpacing\": 0.000499996,            \"DerivedVendorReportedEchoSpacing\": 0.000499996,\n    \"TotalReadoutTime\": 0.0354997,                              \"TotalReadoutTime\": 0.0354997,\n    \"PixelBandwidth\": 2315,                                     \"PixelBandwidth\": 2315,\n    \"DwellTime\": 3e-06,                                         \"DwellTime\": 3e-06,\n    \"PhaseEncodingDirection\": \"j-\",                        |    \"PhaseEncodingDirection\": \"j\",\n    \"SliceTiming\": [                                            \"SliceTiming\": [\n0,                                                          0,\n        1.45,                                              |        1.4475,\n        0.4825,                                                     0.4825,\n        1.9325,                                            |        1.93,\n        0.9675    ],                                       |        0.965    ],\n    \"ImageOrientationPatientDICOM\": [                           \"ImageOrientationPatientDICOM\": [\n1,                                                          1,\n        0,                                                          0,\n        0,                                                          0,\n        0,                                                          0,\n        1,                                                          1,\n        0    ],                                                     0   ],\n    \"ImageOrientationText\": \"Tra\",                              \"ImageOrientationText\": \"Tra\",\n    \"InPlanePhaseEncodingDirectionDICOM\": \"COL\",                \"InPlanePhaseEncodingDirectionDICOM\": \"COL\",\n    \"ConversionSoftware\": \"dcm2niix\",                           \"ConversionSoftware\": \"dcm2niix\",\n    \"ConversionSoftwareVersion\": \"v1.0.20211006\"                \"ConversionSoftwareVersion\": \"v1.0.20211006\"\n}                                                           }\n</code></pre> <p>Again, when you will do it with your DICOMs, you will want to run <code>dcm2bids_helper</code> on a typical session of one of your participants. You will probably get more files than this example</p> <p>For the purpose of the tutorial, we will be interested in three specific acquisitions, namely:</p> <ol> <li><code>004_In_DCM2NIIX_regression_test_20180918114023</code></li> <li><code>003_In_EPI_PE=AP_20180918121230</code></li> <li><code>004_In_EPI_PE=PA_20180918121230</code></li> </ol> <p>The first is an resting-state fMRI acquisiton whereas the second and third are fieldmap EPI.</p>"},{"location":"tutorial/first-steps/#setting-up-the-configuration-file","title":"Setting up the configuration file","text":"<p>Once you found the data you want to BIDSify, you can start setting up your configuration file. The file name is arbritrary but for the readibility purpose, you can name it <code>dcm2bids_config.json</code> like in the tutorial. You can create in the <code>code/</code> directory. Use any code editor to create the file and add the following content:</p> <pre><code>{\n\"descriptions\": []\n}\n</code></pre> CommandOutput <pre><code>nano code/dcm2bids_config.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ nano code/dcm2bids_config.json\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$\n# No output is shown since nano is an interactive terminal-based editor\n</code></pre>"},{"location":"tutorial/first-steps/#populating-the-config-file","title":"Populating the config file","text":"<p>To populate the config file, you need to inspect each sidecar files one at a time and make sure there is a unique match for the acquisition you target. For example, with the resting-state fMRI data (<code>004_In_DCM2NIIX_regression_test_20180918114023</code>). You can inspect its sidecar file and look for the <code>\"SeriesDescription\"</code> field for example. It is often a good unique identifier.</p> CommandOutput <pre><code>cat code/dcm2bids_config.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ cat tmp_dcm2bids/helper/004_In_DCM2NIIX_regression_test_20180918114023.json\n{\n\"Modality\": \"MR\",\n    \"MagneticFieldStrength\": 3,\n    \"ImagingFrequency\": 127.697,\n    \"Manufacturer\": \"GE\",\n    \"PulseSequenceName\": \"epiRT\",\n    \"InternalPulseSequenceName\": \"EPI\",\n    \"ManufacturersModelName\": \"DISCOVERY MR750\",\n    \"InstitutionName\": \"NIH FMRIF\",\n    \"DeviceSerialNumber\": \"000301496MR3T6MR\",\n    \"StationName\": \"fmrif3tb\",\n    \"BodyPartExamined\": \"BRAIN\",\n    \"PatientPosition\": \"HFS\",\n    \"SoftwareVersions\": \"27\\\\LX\\\\MR Software release:DV26.0_R01_1725.a\",\n    \"MRAcquisitionType\": \"2D\",\n    \"SeriesDescription\": \"Axial EPI-FMRI (Interleaved I to S)\",\n    \"ProtocolName\": \"DCM2NIIX regression test\",\n    \"ScanningSequence\": \"EP\\\\GR\",\n    \"SequenceVariant\": \"SS\",\n    \"ScanOptions\": \"EPI_GEMS\\\\PFF\",\n    \"ImageType\": [\"ORIGINAL\", \"PRIMARY\", \"EPI\", \"NONE\"],\n    \"SeriesNumber\": 4,\n    \"AcquisitionTime\": \"11:48:15.000000\",\n    \"AcquisitionNumber\": 1,\n    \"SliceThickness\": 3,\n    \"SpacingBetweenSlices\": 5,\n    \"SAR\": 0.0166392,\n    \"EchoTime\": 0.03,\n    \"RepetitionTime\": 5,\n    \"FlipAngle\": 60,\n    \"PhaseEncodingPolarityGE\": \"Unflipped\",\n    \"CoilString\": \"32Ch Head\",\n    \"PercentPhaseFOV\": 100,\n    \"PercentSampling\": 100,\n    \"AcquisitionMatrixPE\": 64,\n    \"ReconMatrixPE\": 64,\n    \"EffectiveEchoSpacing\": 0.000388,\n    \"TotalReadoutTime\": 0.024444,\n    \"PixelBandwidth\": 7812.5,\n    \"PhaseEncodingDirection\": \"j-\",\n    \"SliceTiming\": [\n0,\n        2.66667,\n        0.333333,\n        3,\n        0.666667,\n        3.33333,\n        1,\n        3.66667,\n        1.33333,\n        4,\n        1.66667,\n        4.33333,\n        2,\n        4.66667,\n        2.33333 ],\n    \"ImageOrientationPatientDICOM\": [\n1,\n        -0,\n        0,\n        -0,\n        1,\n        0   ],\n    \"InPlanePhaseEncodingDirectionDICOM\": \"COL\",\n    \"ConversionSoftware\": \"dcm2niix\",\n    \"ConversionSoftwareVersion\": \"v1.0.20211006\"\n}\n</code></pre> <p>To match the <code>\"SeriesDescription\"</code> field, a pattern like <code>Axial EPI-FMRI*</code> could match it. However, we need to make sure we will match only one acquisition. You can test it by looking manually at inside all sidecar files but it is now recommend. It is rather trivial for the computer to look in all the .json files for you with the <code>grep</code> command:</p> CommandOutput <pre><code>grep \"Axial EPI-FMRI*\" tmp_dcm2bids/helper/*.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ grep \"Axial EPI-FMRI*\" tmp_dcm2bids/helper/*.json\ntmp_dcm2bids/helper/004_In_DCM2NIIX_regression_test_20180918114023.json:    \"SeriesDescription\": \"Axial EPI-FMRI (Interleaved I to S)\",\ntmp_dcm2bids/helper/005_In_DCM2NIIX_regression_test_20180918114023.json:    \"SeriesDescription\": \"Axial EPI-FMRI (Sequential I to S)\",\ntmp_dcm2bids/helper/006_In_DCM2NIIX_regression_test_20180918114023.json:    \"SeriesDescription\": \"Axial EPI-FMRI (Interleaved S to I)\",\ntmp_dcm2bids/helper/007_In_DCM2NIIX_regression_test_20180918114023.json:    \"SeriesDescription\": \"Axial EPI-FMRI (Sequential S to I)\",\n</code></pre> <p>Unfortunately, this criteria is not enough and it could match other 4 files.</p> <p>In this situation, you can add another criteria to match the specific acquisition. Which one do you think would be more appropriate? Go back to the content of the fMRI sidecar file and find a another criteria that, in combination with the <code>\"SeriesDescription\"</code>, will uniquely match the fMRI data.</p> <p>Right, maybe instead of trying to look for another field, you could simply extend the criteria for the <code>\"SeriesDescription\"</code>. How many files does it match if you extend it to the full value (<code>Axial EPI-FMRI (Interleaved I to S)</code>?</p> CommandOutput <pre><code>grep \"Axial EPI-FMRI (Interleaved I to S)*\" tmp_dcm2bids/helper/*.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ grep \"Axial EPI-FMRI (Interleaved I to S)*\" tmp_dcm2bids/helper/*.json\ntmp_dcm2bids/helper/004_In_DCM2NIIX_regression_test_20180918114023.json:    \"SeriesDescription\": \"Axial EPI-FMRI (Interleaved I to S)\",\n</code></pre> <p>, there is only one match! It means you can now update your configuration file by adding a couple of necessary fields for which you can find a description in How to create a config file. Since it is a resting-stage fMRI acquisition, you want to specify it like this then make dcm2bids change your task name:</p> <pre><code>{\n\"descriptions\": [\n{\n\"dataType\": \"func\",\n\"modalityLabel\": \"bold\",\n\"customLabels\": \"task-rest\",\n\"criteria\": {\n\"SeriesDescription\": \"Axial EPI-FMRI (Interleaved I to S)*\"\n\"sidecarChanges\": {\n\"TaskName\": \"rest\"\n}\n}\n}\n]\n}\n</code></pre> CommandOutput <pre><code>nano code/dcm2bids_config.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ nano code/dcm2bids_config.json\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ cat code/dcm2bids_config.json\n{\n\"descriptions\": [\n{\n\"dataType\": \"func\",\n      \"modalityLabel\": \"bold\",\n      \"customLabels\": \"task-rest\",\n      \"criteria\": {\n\"SeriesDescription\": \"*Axial EPI-FMRI (Interleaved I to S)*\"\n},\n      \"sidecarChanges\": {\n\"TaskName\": \"rest\"\n}\n}\n]\n}\n</code></pre> <p>Avoid using filename as criteria</p> <p>While you can take file names to match as criteria, we do not recommend this as different versions of dcm2niix can lead to different file names (Refer to the release notes of version 17-March-2021 (v1.0.20210317) of dcmniix to now more, especially the GE file naming behavior changes (%p protocol name and %d description) section.</p> <p>Moving to the two fieldmaps, if you inspect their sidecar files (the same ones that were compared in the dcm2bids_helper section), you can see a pattern of <code>\"EPI PE=AP\"</code> or <code>\"EPI PE=PA\"</code> in the <code>SeriesDescription</code> once again. Is it enough to match only the correct acquisition?</p> <p>You can test it, of course!</p> CommandOutput <pre><code>grep \"EPI PE=AP\" tmp_dcm2bids/helper/*.json\ngrep \"EPI PE=PA\" tmp_dcm2bids/helper/*.json\n</code></pre> <p>There are two matches per pattern but they come from the same file, so it is okay. <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ grep \"EPI PE=AP\" tmp_dcm2bids/helper/*.json\ntmp_dcm2bids/helper/003_In_EPI_PE=AP_20180918121230.json:   \"SeriesDescription\": \"EPI PE=AP\",\ntmp_dcm2bids/helper/003_In_EPI_PE=AP_20180918121230.json:   \"ProtocolName\": \"EPI PE=AP\",\n(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ grep \"EPI PE=PA\" tmp_dcm2bids/helper/*.json\ntmp_dcm2bids/helper/004_In_EPI_PE=PA_20180918121230.json:   \"SeriesDescription\": \"EPI PE=PA\",\ntmp_dcm2bids/helper/004_In_EPI_PE=PA_20180918121230.json:   \"ProtocolName\": \"EPI PE=PA\",\n</code></pre></p> <p>Once you are sure of you matching criteria, you can update your configuration file with the appropriate info.</p> <pre><code>{\n\"descriptions\": [\n{\n\"dataType\": \"func\",\n\"modalityLabel\": \"bold\",\n\"customLabels\": \"task-rest\",\n\"criteria\": {\n\"SeriesDescription\": \"Axial EPI-FMRI (Interleaved I to S)*\"\n},\n\"sidecarChanges\": {\n\"TaskName\": \"rest\"\n}\n},\n{\n\"dataType\": \"fmap\",\n\"modalityLabel\": \"epi\",\n\"customLabels\": \"dir-AP\",\n\"criteria\": {\n\"SeriesDescription\": \"EPI PE=AP*\"\n},\n\"intendedFor\": 0\n},\n{\n\"dataType\": \"fmap\",\n\"modalityLabel\": \"epi\",\n\"customLabels\": \"dir-PA\",\n\"criteria\": {\n\"SeriesDescription\": \"EPI PE=PA*\"\n},\n\"intendedFor\": 0\n}\n]\n}\n</code></pre> <p>For fieldmaps, you need to add an <code>\"intendedFor\"</code> field to show that these fieldmaps should be used with your fMRI acquisition. Have a look at the explanation of intendedFor in the documentation or in the BIDS specification.</p> <p>Use an online JSON validator</p> <p>Editing JSON file is prone to errors such as misplacing or forgetting a comma or not having matched opening and closing <code>[]</code> or <code>{}</code>. JSON linters are useful to validate that we did enter all information successfully. You can find these tools online, for example https://jsonlint.com.</p> <p>Now that you have a configuration file ready, it is time to finally run <code>dcm2bids</code>.</p>"},{"location":"tutorial/first-steps/#running-dcm2bids","title":"Running <code>dcm2bids</code>","text":"<p>By now, you should be used to getting the <code>--help</code> information before running a command.</p> CommandOutput <pre><code>dcm2bids --help\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ dcm2bids --help\nusage: dcm2bids [-h] -d DICOM_DIR [DICOM_DIR ...] -p PARTICIPANT [-s SESSION] -c CONFIG [-o OUTPUT_DIR] [--forceDcm2niix] [--clobber]\n[-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [-a]\n\nReorganising NIfTI files from dcm2niix into the Brain Imaging Data Structure\ndcm2bids 2.1.7\n\noptions:\n-h, --help            show this help message and exit\n-d DICOM_DIR [DICOM_DIR ...], --dicom_dir DICOM_DIR [DICOM_DIR ...]\nDICOM directory(ies)\n-p PARTICIPANT, --participant PARTICIPANT\n                        Participant ID\n-s SESSION, --session SESSION\n                        Session ID\n-c CONFIG, --config CONFIG\n                        JSON configuration file (see example/config.json)\n-o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        Output BIDS directory, Default: current directory (/home/sam/dcm2bids-tutorial/bids_project)\n--forceDcm2niix       Overwrite previous temporary dcm2niix output if it exists\n--clobber             Overwrite output if it exists\n-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}, --log_level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\nSet logging level\n-a, --anonymizer      This option no longer exists from the script in this release. See:https://github.com/unfmontreal/Dcm2Bids/blob/master/README.md#defaceTpl\n\n            Documentation at https://github.com/unfmontreal/Dcm2Bids\n</code></pre> <p>As you can see, to run the <code>dcm2bids</code> command, you have to specify at least 3 required options with their argument.</p> <pre><code>dcm2bids -d path/to/source/data -p subject_id -c path/to/config/file.json\n</code></pre> <p><code>dcm2bids</code> will create a directory which will be named after the argument specified for <code>-p</code>, and put the BIDSified data in it.</p> <p>For the tutorial, pretend that the subject_id is simply <code>ID01</code>.</p> <p>Note that if you don't specify the <code>-o</code> option, your current directory will be populated with the <code>sub-&lt;label&gt;</code> directories.</p> <p>That being said, you can run the command:</p> CommandOutput <pre><code>dcm2bids -d sourcedata/dcm_qa_nih/In/ -p ID01 -c code/dcm2bids_config.json\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ dcm2bids -d sourcedata/dcm_qa_nih/In/ -p ID01 -c code/dcm2bids_config.json\nINFO:dcm2bids.dcm2bids:--- dcm2bids start ---\nINFO:dcm2bids.dcm2bids:OS:version: Linux-5.13.0-39-generic-x86_64-with-glibc2.31\nINFO:dcm2bids.dcm2bids:python:version: 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:39:04) [GCC 10.3.0]\nINFO:dcm2bids.dcm2bids:dcm2bids:version: 2.1.7\nINFO:dcm2bids.dcm2bids:dcm2niix:version: v1.0.20211006\nINFO:dcm2bids.dcm2bids:participant: sub-ID01\nINFO:dcm2bids.dcm2bids:session:\nINFO:dcm2bids.dcm2bids:config: /home/sam/dcm2bids-tutorial/bids_project/code/dcm2bids_config.json\nINFO:dcm2bids.dcm2bids:BIDS directory: /home/sam/dcm2bids-tutorial/bids_project\nINFO:dcm2bids.utils:Running dcm2niix -b y -ba y -z y -f '%3s_%f_%p_%t' -o /home/sam/dcm2bids-tutorial/bids_project/tmp_dcm2bids/sub-ID01 sourcedata/dcm_qa_nih/In/\nINFO:dcm2bids.dcm2niix:Check log file for dcm2niix output\nINFO:dcm2bids.sidecar:Sidecars pairing:\nINFO:dcm2bids.sidecar:_dir-AP_epi  &lt;-  003_In_EPI_PE=AP_20180918121230\nINFO:dcm2bids.sidecar:_task-rest_bold  &lt;-  004_In_DCM2NIIX_regression_test_20180918114023\nINFO:dcm2bids.sidecar:_dir-PA_epi  &lt;-  004_In_EPI_PE=PA_20180918121230\nINFO:dcm2bids.sidecar:No Pairing  &lt;-  005_In_DCM2NIIX_regression_test_20180918114023\nINFO:dcm2bids.sidecar:No Pairing  &lt;-  005_In_EPI_PE=RL_20180918121230\nINFO:dcm2bids.sidecar:No Pairing  &lt;-  006_In_DCM2NIIX_regression_test_20180918114023\nINFO:dcm2bids.sidecar:No Pairing  &lt;-  006_In_EPI_PE=LR_20180918121230\nINFO:dcm2bids.sidecar:No Pairing  &lt;-  007_In_DCM2NIIX_regression_test_20180918114023\nINFO:dcm2bids.dcm2bids:moving acquisitions into BIDS folder\n</code></pre> <p>A bunch of information is printed to the terminal as well as to a log file located at <code>tmp_dcm2bids/log/sub-&lt;label&gt;_&lt;datetime&gt;.log</code>. It is useful to keep these log files in case you notice an error after a while and need to find which participants are affected.</p> <p>You can see that dcm2bids was able to pair and match the files you specified at lines 14-16 in the previous output tab.</p> <p>You can now have a look in the newly created folder <code>sub-ID01</code> and discover your converted data!</p> CommandOutput <pre><code>tree sub-ID01/\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ tree sub-ID01/\nsub-ID01/\n\u251c\u2500\u2500 fmap\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sub-ID01_dir-AP_epi.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sub-ID01_dir-AP_epi.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sub-ID01_dir-PA_epi.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sub-ID01_dir-PA_epi.nii.gz\n\u2514\u2500\u2500 func\n    \u251c\u2500\u2500 sub-ID01_task-rest_bold.json\n    \u2514\u2500\u2500 sub-ID01_task-rest_bold.nii.gz\n\n2 directories, 6 files\n</code></pre> <p>Files that were not paired stay in a temporary directory <code>tmp_dcm2bids/sub-&lt;label&gt;</code>. In your case : <code>tmp_dcm2bids/sub-ID01</code>.</p> CommandOutput <pre><code>tree tmp_dcm2bids/\n</code></pre> <pre><code>(dcm2bids) sam:~/dcm2bids-tutorial/bids_project$ tree tmp_dcm2bids/\ntmp_dcm2bids/\n\u251c\u2500\u2500 helper\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 003_In_EPI_PE=AP_20180918121230.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 003_In_EPI_PE=AP_20180918121230.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 004_In_DCM2NIIX_regression_test_20180918114023.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 004_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 004_In_EPI_PE=PA_20180918121230.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 004_In_EPI_PE=PA_20180918121230.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 005_In_DCM2NIIX_regression_test_20180918114023.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 005_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 005_In_EPI_PE=RL_20180918121230.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 005_In_EPI_PE=RL_20180918121230.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 006_In_DCM2NIIX_regression_test_20180918114023.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 006_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 006_In_EPI_PE=LR_20180918121230.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 006_In_EPI_PE=LR_20180918121230.nii.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 007_In_DCM2NIIX_regression_test_20180918114023.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 007_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n\u251c\u2500\u2500 log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sub-ID01_2022-04-19T111537.459742.log\n\u2514\u2500\u2500 sub-ID01\n    \u251c\u2500\u2500 005_In_DCM2NIIX_regression_test_20180918114023.json\n    \u251c\u2500\u2500 005_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n    \u251c\u2500\u2500 005_In_EPI_PE=RL_20180918121230.json\n    \u251c\u2500\u2500 005_In_EPI_PE=RL_20180918121230.nii.gz\n    \u251c\u2500\u2500 006_In_DCM2NIIX_regression_test_20180918114023.json\n    \u251c\u2500\u2500 006_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n    \u251c\u2500\u2500 006_In_EPI_PE=LR_20180918121230.json\n    \u251c\u2500\u2500 006_In_EPI_PE=LR_20180918121230.nii.gz\n    \u251c\u2500\u2500 007_In_DCM2NIIX_regression_test_20180918114023.json\n    \u2514\u2500\u2500 007_In_DCM2NIIX_regression_test_20180918114023.nii.gz\n\n3 directories, 27 files\n</code></pre> <p>That is it, you are done with the tutorial! You can now browse through the documentation to find information about the different commands.</p> <p>Go to the How-to guides section  </p> <p>Acknowledgment</p> <p>Thanks to @Remi-gau for letting us know that our tutorial needed an update, and for providing us with a clean and working configuration file through an issue #142 on GitHub .</p>"}]}